#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#

# splash
# https://stackoverflow.com/questions/38676617/tkinter-show-splash-screen-and-hide-main-screen-until-init-has-finished
# https://www.geeksforgeeks.org/how-to-create-a-splash-screen-using-tkinter/

# ini file
# https://www.kite.com/python/answers/how-to-read-and-write-ini-files-in-python
# https://stackoverflow.com/questions/8884188/how-to-read-and-write-ini-file-with-python3

__author__ = 'harryberlin'

import os
import sys
import time
import base64
import io
import platform
import serial
from serial.tools import list_ports
from serial import Serial, PARITY_ODD, serialutil
import datetime
from threading import Thread

PY2 = sys.version_info[0] == 2

if PY2:
    import Tkinter as tk
    from Tkinter import END
    import ttk
    import tkFileDialog as filedialog
    from PIL import ImageTk, Image
    import tkFont as font
    py3 = False
else:
    import tkinter as tk
    import tkinter.ttk as ttk
    from tkinter import filedialog, END

    #os.popen('python3 -m pip install --user Pillow')

    from PIL import ImageTk, Image

    from tkinter import font
    py3 = True


APP_TITLE = 'AVR-IBus-Settings'
APP_ICON_BW = '''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'''
APP_ICON_COLOR = ''''''
APP_ICON_WB = ''''''
APP_ICON_BL = ''''''
APP_ICON_WW = '''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'''


class Splash(tk.Toplevel):
    def __init__(self, parent):
        tk.Toplevel.__init__(self, parent)
        splash_width = 200
        splash_height = 200
        width = self.winfo_screenwidth()
        height = self.winfo_screenheight()
        self.geometry('%dx%d+%d+%d' % (splash_width, splash_height, (width*0.5)-(splash_width*0.5), (height*0.5)-(splash_height*0.5)))

        self.LOGO_IMG = decode_img(APP_ICON_COLOR, (150, 150))
        self.LOGO_IMG = ImageTk.PhotoImage(self.LOGO_IMG)
        self.logo = tk.Label(self)
        self.logo.place(x=5, y=5, width=splash_width-10, height=splash_height-10)
        self.logo.configure(image=self.LOGO_IMG)

        #self.title("Splash")
        self.overrideredirect(True)
        ## required to make window show before the program gets to the mainloop
        self.update()

class App(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.withdraw()

        splash = Splash(self)

        ## setup stuff goes here

        #self.title("Main Window")

        self.tk.call('wm', 'iconphoto', self._w, ImageTk.PhotoImage(decode_img(APP_ICON_COLOR)))
        self._setup()


        ## simulate a delay while loading
        time.sleep(1)

        ## finished loading so destroy splash
        splash.destroy()

        ## show window again
        self.deiconify()
        self.geometry("835x485+341+107")


        self.serial = None
        self.serial_reading_thread = None
        self.serial_run = False
        self.serial_device = None
        self.serial_rx_buffer = []

        self.dont_scroll = False
        
        self._update()
    
    
    def _setup(self):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            #https://wiki.tcl-lang.org/page/List+of+ttk+Themes
            self.style.theme_use('default')
            #self.style.theme_use('xpnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=[('selected', _compcolor), ('active',_ana2color)])

        self._font_count = 0
        self._def_font_size_get()

        if 'linux' in sys.platform:
            self._font_count = -2
            self._def_font_size_set()



        #self.geometry("835x485+341+107")
        self.minsize(130, 1)
        self.maxsize(1604, 861)
        self.resizable(0,  0)
        self.title(APP_TITLE)
        self.configure(background="#d9d9d9")
        self.configure(highlightbackground="#d9d9d9")
        self.configure(highlightcolor="black")


        ### vaibles ###
        #self.LOGO_IMG = tk.PhotoImage(data='''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''')
        #self.LOGO_IMG = self.LOGO_IMG.resize((45, 45), Image.ANTIALIAS)

        #logo_location = 'C:\\Users\\Christian\\Documents\\GitHub\\AVR-IBus\\Images\\logobw64x64.png'

        #self.LOGO_IMG = Image.open(logo_location)

        #self.LOGO_IMG = decode_img('''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''')
        self.LOGO_IMG = decode_img(APP_ICON_WW, (45,45))
        #self.LOGO_IMG = self.LOGO_IMG.resize((45, 45), Image.ANTIALIAS)
        self.LOGO_IMG = ImageTk.PhotoImage(self.LOGO_IMG)


        self.serialports = tk.StringVar()
        self.menuSelectedButton = tk.StringVar()
        self.mode = tk.StringVar()
        self.tgCdcEmu_value = tk.IntVar()
        self.tgF2P_value = tk.IntVar()
        self.tgBlink_value = tk.IntVar()
        self.tgFogTurn_value = tk.IntVar()
        self.tgDrl_value = tk.IntVar()
        self.tgObcDisp_value = tk.IntVar()
        self.tgHeatFFB_value = tk.IntVar()
        self.tgCVMFold_value = tk.IntVar()
        self.tgBFD_value = tk.IntVar()
        self.tgRCam_value = tk.IntVar()
        self.tgNavZoom_value = tk.IntVar()
        self.tgF2PLow_value = tk.IntVar()
        self.tgF2PHigh_value = tk.IntVar()
        self.tgDrlParkFront_value = tk.IntVar()
        self.tgDrlFogFront_value = tk.IntVar()
        self.tgDrlParkTail_value = tk.IntVar()
        self.tgObcDispCoolant_value = tk.IntVar()
        self.tgObcDispSpeed_value = tk.IntVar()
        self.tgObcDispOil_value = tk.IntVar()
        self.tgObcDispVolt_value = tk.IntVar()
        self.tgObcDispFive_value = tk.IntVar()
        self.tgObcDispSix_value = tk.IntVar()
        self.tgObcDispSeven_value = tk.IntVar()
        self.tgObcDispEight_value = tk.IntVar()
        self.tgRxTxRx_value = tk.IntVar()
        self.tgRxTxTx_value = tk.IntVar()
        self.tgWelMsg_value = tk.IntVar()
        self.tgWelLight_value = tk.IntVar()
        self.tgLevLight_value = tk.IntVar()
        self.tgSenVal_value = tk.IntVar()
        self.txtWelMsg_value = tk.StringVar()
        self.lblWelMsgLen_value = tk.StringVar()
        self.lblWelMsgLen_value.set('(9)')
        self.tgWelLightCancelIgn3_value = tk.IntVar()
        self.tgWelLightCancelKeyIn_value = tk.IntVar()
        self.tgWelLightCancelDoor_value = tk.IntVar()
        self.tgWelLightCancelIgn1_value = tk.IntVar()
        self.tgLightParkFront_value = tk.IntVar()
        self.tgLightParkBack_value = tk.IntVar()
        self.tgLightParkBackInside_value = tk.IntVar()
        self.tgLightBeamLow_value = tk.IntVar()
        self.tgLightBeamHigh_value = tk.IntVar()
        self.tgLightTurnFront_value = tk.IntVar()
        self.tgLightTurnBack_value = tk.IntVar()
        self.tgLightTurnSide_value = tk.IntVar()
        self.tgLightOtherFogFront_value = tk.IntVar()
        self.tgLightOtherLicence_value = tk.IntVar()
        self.tgLightOtherReverse_value = tk.IntVar()
        self.tgLightOtherBrake_value = tk.IntVar()
        self.tgLightOtherAmbient_value = tk.IntVar()
        self.tgLightOtherFogBack_value = tk.IntVar()
        self.tgLockSpeed_value = tk.IntVar()
        self.tgRelock_value = tk.IntVar()
        self.tgUnlockDoor_value = tk.IntVar()
        self.tgUnlockBrake_value = tk.IntVar()
        self.tgUnlockGearP_value = tk.IntVar()
        self.tgUnlockIgn1_value = tk.IntVar()
        self.avr_mode = tk.IntVar()
        self.tgLog_value = tk.IntVar()
        self.tgLogTime_value = tk.IntVar()
        self.tgAutScroll_value = tk.IntVar()
        self.tgUpload_value = tk.IntVar()
        self.lbLog_list = tk.StringVar()
        self.txtSelectedHex_value = tk.StringVar()

        ### widgets ###
        self.cbSerialPorts = ttk.Combobox(self)
        self.cbSerialPorts.place(x=85, y=10, height=24, width=385)
        self.port_list = ['Select Device...',]
        self.cbSerialPorts.configure(values=self.port_list)
        self.cbSerialPorts.configure(textvariable=self.serialports)
        self.cbSerialPorts.configure(takefocus="")
        self.cbSerialPorts.configure(state="readonly")
        self.cbSerialPorts.bind("<<ComboboxSelected>>", lambda e: self.focus())
        self.cbSerialPorts.current(0)

        self.btnOpen = tk.Button(self)
        self.btnOpen.place(x=475, y=10, height=24, width=40)
        self.btnOpen.configure(activebackground="#ececec")
        self.btnOpen.configure(activeforeground="#000000")
        self.btnOpen.configure(background="#d9d9d9")
        self.btnOpen.configure(command=self.btnOpen_click)
        self.btnOpen.configure(disabledforeground="#a3a3a3")
        self.btnOpen.configure(foreground="#000000")
        self.btnOpen.configure(highlightbackground="#d9d9d9")
        self.btnOpen.configure(highlightcolor="black")
        self.btnOpen.configure(pady="0")
        self.btnOpen.configure(text='''Open''')

        self.btnClose = tk.Button(self)
        self.btnClose.place(x=520, y=10, height=24, width=40)
        self.btnClose.configure(activebackground="#ececec")
        self.btnClose.configure(activeforeground="#000000")
        self.btnClose.configure(background="#d9d9d9")
        self.btnClose.configure(command=self.btnClose_click)
        self.btnClose.configure(disabledforeground="#a3a3a3")
        self.btnClose.configure(foreground="#000000")
        self.btnClose.configure(highlightbackground="#d9d9d9")
        self.btnClose.configure(highlightcolor="black")
        self.btnClose.configure(pady="0")
        self.btnClose.configure(state='disabled')
        self.btnClose.configure(text='''Close''')

        self.btnCustom = tk.Button(self)
        self.btnCustom.place(x=570, y=10, height=24, width=50)
        self.btnCustom.configure(activebackground="#ececec")
        self.btnCustom.configure(activeforeground="#000000")
        self.btnCustom.configure(background="#d9d9d9")
        self.btnCustom.configure(command=self.btnCustom_click)
        self.btnCustom.configure(disabledforeground="#a3a3a3")
        self.btnCustom.configure(foreground="#000000")
        self.btnCustom.configure(highlightbackground="#d9d9d9")
        self.btnCustom.configure(highlightcolor="black")
        self.btnCustom.configure(pady="0")
        self.btnCustom.configure(text='''Custom''')

        self.menubar = tk.Menu(self,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        self.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(self,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                label="File")
        self.sub_menu.add_command(
                label="Open")
        self.sub_menu1 = tk.Menu(self,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.sub_menu.add_cascade(menu=self.sub_menu1,
                label="NewCascade")
        self.sub_menu1.add_radiobutton(
                value="1",
                variable=self.menuSelectedButton,
                label="NewRadio")
        self.sub_menu1.add_radiobutton(
                value="2",
                variable=self.menuSelectedButton,
                label="NewRadio")
        self.sub_menu1.add_radiobutton(
                value="3",
                variable=self.menuSelectedButton,
                label="NewRadio")
        self.sub_menu12 = tk.Menu(self,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.sub_menu.add_cascade(menu=self.sub_menu12,
                label="Interface Mode")
        self.sub_menu12.add_radiobutton(
                value="0",
                variable=self.mode,
                label="AVR")
        self.sub_menu12.add_radiobutton(
                value="-1",
                variable=self.mode,
                label="IBus")
        self.sub_menu123 = tk.Menu(self,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu123,
                label="?")
        self.sub_menu123.add_command(
                label="About")

        global _images
        _images = (

         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                 KkoNUtRHpYYAADs= '''),

         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),

         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                 +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )

        self.style.element_create("close", "image", "img_close",
               ("active", "pressed", "!disabled", "img_closepressed"),
               ("active", "alternate", "!disabled",
               "img_closeactive"), border=8, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                     {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
              { "sticky": "nswe",
                "children": [
                    ("ClosetabNotebook.padding", {
                        "side": "top",
                        "sticky": "nswe",
                        "children": [
                            ("ClosetabNotebook.focus", {
                                "side": "top",
                                "sticky": "nswe",
                                "children": [
                                    ("ClosetabNotebook.label", {"side":
                                      "left", "sticky": ''}),
                                    ("ClosetabNotebook.close", {"side":
                                        "left", "sticky": ''}),]})]})]})])

        PNOTEBOOK = "ClosetabNotebook"

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.Tabs = ttk.Notebook(self)
        self.Tabs.place(x=10, y=40, height=370, width=550)
        #self.Tabs.configure(style=PNOTEBOOK)

        self.tabMain = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabMain, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs())-1, text="Main",compound="none",underline="-1",)
        self.tabMain.configure(background="#d9d9d9")
        self.tabMain.configure(highlightbackground="#d9d9d9")
        self.tabMain.configure(highlightcolor="black")

        self.tabSettings = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabSettings, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs())-1, text="Settings",compound="none",underline="-1",)
        self.tabSettings.configure(background="#d9d9d9")
        self.tabSettings.configure(highlightbackground="#d9d9d9")
        self.tabSettings.configure(highlightcolor="black")

        self.tabWelcomeLeaving = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabWelcomeLeaving, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs())-1, text="Welome/Leaving",compound="none",underline="-1",)
        self.tabWelcomeLeaving.configure(background="#d9d9d9")
        self.tabWelcomeLeaving.configure(highlightbackground="#d9d9d9")
        self.tabWelcomeLeaving.configure(highlightcolor="black")

        self.tabCentralLock = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabCentralLock, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs())-1, text="Central Lock",compound="none",underline="-1",)
        self.tabCentralLock.configure(background="#d9d9d9")
        self.tabCentralLock.configure(highlightbackground="#d9d9d9")
        self.tabCentralLock.configure(highlightcolor="black")
        self.tabCommands = tk.Frame(self.Tabs)

        self.Tabs.add(self.tabCommands, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs())-1, text="Commands",compound="none",underline="-1",)
        self.tabCommands.configure(background="#d9d9d9")
        self.tabCommands.configure(highlightbackground="#d9d9d9")
        self.tabCommands.configure(highlightcolor="black")


        if PY2:
            self.tabFirmware = tk.Frame(self.Tabs)
            self.Tabs.add(self.tabFirmware, padding=3)
            self.Tabs.tab(len(self.Tabs.tabs())-1, text="Firmware",compound="none",underline="-1",)
            self.tabFirmware.configure(background="#d9d9d9")
            self.tabFirmware.configure(highlightbackground="#d9d9d9")
            self.tabFirmware.configure(highlightcolor="black")

        self.tabLogging = tk.Frame(self.Tabs)
        self.Tabs.add(self.tabLogging, padding=3)
        self.Tabs.tab(len(self.Tabs.tabs())-1, text="Logging",compound="none",underline="-1",)
        self.tabLogging.configure(background="#d9d9d9")
        self.tabLogging.configure(highlightbackground="#d9d9d9")
        self.tabLogging.configure(highlightcolor="black")

        self.tgCdcEmu = tk.Checkbutton(self.tabMain)
        self.tgCdcEmu.place(x=10, y=10, height=24, width=25)
        self.tgCdcEmu.configure(activebackground="#d9d9d9")
        self.tgCdcEmu.configure(activeforeground="#000000")
        self.tgCdcEmu.configure(background="#d9d9d9")
        self.tgCdcEmu.configure(command=self.tgCdcEmu_click)
        self.tgCdcEmu.configure(disabledforeground="#a3a3a3")
        self.tgCdcEmu.configure(foreground="#000000")
        self.tgCdcEmu.configure(highlightbackground="#d9d9d9")
        self.tgCdcEmu.configure(highlightcolor="black")
        self.tgCdcEmu.configure(indicatoron="0")
        self.tgCdcEmu.configure(justify='left')
        self.tgCdcEmu.configure(selectcolor="#d9d9d9")
        self.tgCdcEmu.configure(variable=self.tgCdcEmu_value)

        self.tgF2P = tk.Checkbutton(self.tabMain)
        self.tgF2P.place(x=10, y=40, height=24, width=25)
        self.tgF2P.configure(activebackground="#d9d9d9")
        self.tgF2P.configure(activeforeground="#000000")
        self.tgF2P.configure(background="#d9d9d9")
        self.tgF2P.configure(command=self.tgF2P_click)
        self.tgF2P.configure(disabledforeground="#a3a3a3")
        self.tgF2P.configure(foreground="#000000")
        self.tgF2P.configure(highlightbackground="#d9d9d9")
        self.tgF2P.configure(highlightcolor="black")
        self.tgF2P.configure(indicatoron="0")
        self.tgF2P.configure(justify='left')
        self.tgF2P.configure(selectcolor="#d9d9d9")
        self.tgF2P.configure(variable=self.tgF2P_value)

        self.tgBlink = tk.Checkbutton(self.tabMain)
        self.tgBlink.place(x=10, y=70, height=24, width=25)
        self.tgBlink.configure(activebackground="#d9d9d9")
        self.tgBlink.configure(activeforeground="#000000")
        self.tgBlink.configure(background="#d9d9d9")
        self.tgBlink.configure(command=self.tgBlink_click)
        self.tgBlink.configure(disabledforeground="#a3a3a3")
        self.tgBlink.configure(foreground="#000000")
        self.tgBlink.configure(highlightbackground="#d9d9d9")
        self.tgBlink.configure(highlightcolor="black")
        self.tgBlink.configure(indicatoron="0")
        self.tgBlink.configure(justify='left')
        self.tgBlink.configure(selectcolor="#d9d9d9")
        self.tgBlink.configure(variable=self.tgBlink_value)

        self.tgFogTurn = tk.Checkbutton(self.tabMain)
        self.tgFogTurn.place(x=10, y=100, height=24, width=25)
        self.tgFogTurn.configure(activebackground="#d9d9d9")
        self.tgFogTurn.configure(activeforeground="#000000")
        self.tgFogTurn.configure(background="#d9d9d9")
        self.tgFogTurn.configure(command=self.tgFogTurn_click)
        self.tgFogTurn.configure(disabledforeground="#a3a3a3")
        self.tgFogTurn.configure(foreground="#000000")
        self.tgFogTurn.configure(highlightbackground="#d9d9d9")
        self.tgFogTurn.configure(highlightcolor="black")
        self.tgFogTurn.configure(indicatoron="0")
        self.tgFogTurn.configure(justify='left')
        self.tgFogTurn.configure(selectcolor="#d9d9d9")
        self.tgFogTurn.configure(variable=self.tgFogTurn_value)

        self.tgDrl = tk.Checkbutton(self.tabMain)
        self.tgDrl.place(x=10, y=130, height=24, width=25)
        self.tgDrl.configure(activebackground="#d9d9d9")
        self.tgDrl.configure(activeforeground="#000000")
        self.tgDrl.configure(background="#d9d9d9")
        self.tgDrl.configure(command=self.tgDrl_click)
        self.tgDrl.configure(disabledforeground="#a3a3a3")
        self.tgDrl.configure(foreground="#000000")
        self.tgDrl.configure(highlightbackground="#d9d9d9")
        self.tgDrl.configure(highlightcolor="black")
        self.tgDrl.configure(indicatoron="0")
        self.tgDrl.configure(justify='left')
        self.tgDrl.configure(selectcolor="#d9d9d9")
        self.tgDrl.configure(variable=self.tgDrl_value)

        self.tgObcDisp = tk.Checkbutton(self.tabMain)
        self.tgObcDisp.place(x=10, y=160, height=24, width=25)
        self.tgObcDisp.configure(activebackground="#d9d9d9")
        self.tgObcDisp.configure(activeforeground="#000000")
        self.tgObcDisp.configure(background="#d9d9d9")
        self.tgObcDisp.configure(command=self.tgObcDisp_click)
        self.tgObcDisp.configure(disabledforeground="#a3a3a3")
        self.tgObcDisp.configure(foreground="#000000")
        self.tgObcDisp.configure(highlightbackground="#d9d9d9")
        self.tgObcDisp.configure(highlightcolor="black")
        self.tgObcDisp.configure(indicatoron="0")
        self.tgObcDisp.configure(justify='left')
        self.tgObcDisp.configure(selectcolor="#d9d9d9")
        self.tgObcDisp.configure(variable=self.tgObcDisp_value)

        self.tgHeatFFB = tk.Checkbutton(self.tabMain)
        self.tgHeatFFB.place(x=10, y=190, height=24, width=25)
        self.tgHeatFFB.configure(activebackground="#d9d9d9")
        self.tgHeatFFB.configure(activeforeground="#000000")
        self.tgHeatFFB.configure(background="#d9d9d9")
        self.tgHeatFFB.configure(command=self.tgHeatFFB_click)
        self.tgHeatFFB.configure(disabledforeground="#a3a3a3")
        self.tgHeatFFB.configure(foreground="#000000")
        self.tgHeatFFB.configure(highlightbackground="#d9d9d9")
        self.tgHeatFFB.configure(highlightcolor="black")
        self.tgHeatFFB.configure(indicatoron="0")
        self.tgHeatFFB.configure(justify='left')
        self.tgHeatFFB.configure(selectcolor="#d9d9d9")
        self.tgHeatFFB.configure(variable=self.tgHeatFFB_value)

        self.tgCVMFold = tk.Checkbutton(self.tabMain)
        self.tgCVMFold.place(x=10, y=220, height=24, width=25)
        self.tgCVMFold.configure(activebackground="#d9d9d9")
        self.tgCVMFold.configure(activeforeground="#000000")
        self.tgCVMFold.configure(background="#d9d9d9")
        self.tgCVMFold.configure(command=self.tgCVMFold_click)
        self.tgCVMFold.configure(disabledforeground="#a3a3a3")
        self.tgCVMFold.configure(foreground="#000000")
        self.tgCVMFold.configure(highlightbackground="#d9d9d9")
        self.tgCVMFold.configure(highlightcolor="black")
        self.tgCVMFold.configure(indicatoron="0")
        self.tgCVMFold.configure(justify='left')
        self.tgCVMFold.configure(selectcolor="#d9d9d9")
        self.tgCVMFold.configure(variable=self.tgCVMFold_value)

        self.tgBFD = tk.Checkbutton(self.tabMain)
        self.tgBFD.place(x=10, y=250, height=24, width=25)
        self.tgBFD.configure(activebackground="#d9d9d9")
        self.tgBFD.configure(activeforeground="#000000")
        self.tgBFD.configure(background="#d9d9d9")
        self.tgBFD.configure(command=self.tgBFD_click)
        self.tgBFD.configure(disabledforeground="#a3a3a3")
        self.tgBFD.configure(foreground="#000000")
        self.tgBFD.configure(highlightbackground="#d9d9d9")
        self.tgBFD.configure(highlightcolor="black")
        self.tgBFD.configure(indicatoron="0")
        self.tgBFD.configure(justify='left')
        self.tgBFD.configure(selectcolor="#d9d9d9")
        self.tgBFD.configure(variable=self.tgBFD_value)

        self.tgRCam = tk.Checkbutton(self.tabMain)
        self.tgRCam.place(x=10, y=280, height=24, width=25)
        self.tgRCam.configure(activebackground="#d9d9d9")
        self.tgRCam.configure(activeforeground="#000000")
        self.tgRCam.configure(background="#d9d9d9")
        self.tgRCam.configure(command=self.tgRCam_click)
        self.tgRCam.configure(disabledforeground="#a3a3a3")
        self.tgRCam.configure(foreground="#000000")
        self.tgRCam.configure(highlightbackground="#d9d9d9")
        self.tgRCam.configure(highlightcolor="black")
        self.tgRCam.configure(indicatoron="0")
        self.tgRCam.configure(justify='left')
        self.tgRCam.configure(selectcolor="#d9d9d9")
        self.tgRCam.configure(variable=self.tgRCam_value)

        self.tgNavZoom = tk.Checkbutton(self.tabMain)
        self.tgNavZoom.place(x=10, y=310, height=24, width=25)
        self.tgNavZoom.configure(activebackground="#d9d9d9")
        self.tgNavZoom.configure(activeforeground="#000000")
        self.tgNavZoom.configure(background="#d9d9d9")
        self.tgNavZoom.configure(command=self.tgNavZoom_click)
        self.tgNavZoom.configure(disabledforeground="#a3a3a3")
        self.tgNavZoom.configure(foreground="#000000")
        self.tgNavZoom.configure(highlightbackground="#d9d9d9")
        self.tgNavZoom.configure(highlightcolor="black")
        self.tgNavZoom.configure(indicatoron="0")
        self.tgNavZoom.configure(justify='left')
        self.tgNavZoom.configure(selectcolor="#d9d9d9")
        self.tgNavZoom.configure(variable=self.tgNavZoom_value)

        self.Label1 = tk.Label(self.tabMain)
        self.Label1.place(x=40, y=10, height=24, width=75)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(relief="groove")
        self.Label1.configure(text='''CDC EMU''')

        self.Label1_1 = tk.Label(self.tabMain)
        self.Label1_1.place(x=40, y=40, height=24, width=75)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(relief="groove")
        self.Label1_1.configure(text='''F2P''')

        self.Label1_1_1 = tk.Label(self.tabMain)
        self.Label1_1_1.place(x=40, y=70, height=24, width=75)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(activeforeground="black")
        self.Label1_1_1.configure(background="#d9d9d9")
        self.Label1_1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1_1.configure(foreground="#000000")
        self.Label1_1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1_1.configure(highlightcolor="black")
        self.Label1_1_1.configure(relief="groove")
        self.Label1_1_1.configure(text='''BLINK''')

        self.Label1_1_2 = tk.Label(self.tabMain)
        self.Label1_1_2.place(x=40, y=100, height=24, width=75)
        self.Label1_1_2.configure(activebackground="#f9f9f9")
        self.Label1_1_2.configure(activeforeground="black")
        self.Label1_1_2.configure(background="#d9d9d9")
        self.Label1_1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_1_2.configure(foreground="#000000")
        self.Label1_1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_1_2.configure(highlightcolor="black")
        self.Label1_1_2.configure(relief="groove")
        self.Label1_1_2.configure(text='''FOG TURN''')

        self.Label1_1_3 = tk.Label(self.tabMain)
        self.Label1_1_3.place(x=40, y=130, height=24, width=75)
        self.Label1_1_3.configure(activebackground="#f9f9f9")
        self.Label1_1_3.configure(activeforeground="black")
        self.Label1_1_3.configure(background="#d9d9d9")
        self.Label1_1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_1_3.configure(foreground="#000000")
        self.Label1_1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_1_3.configure(highlightcolor="black")
        self.Label1_1_3.configure(relief="groove")
        self.Label1_1_3.configure(text='''DRL''')

        self.Label1_1_4 = tk.Label(self.tabMain)
        self.Label1_1_4.place(x=40, y=160, height=24, width=75)
        self.Label1_1_4.configure(activebackground="#f9f9f9")
        self.Label1_1_4.configure(activeforeground="black")
        self.Label1_1_4.configure(background="#d9d9d9")
        self.Label1_1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_1_4.configure(foreground="#000000")
        self.Label1_1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_1_4.configure(highlightcolor="black")
        self.Label1_1_4.configure(relief="groove")
        self.Label1_1_4.configure(text='''OBC DISP''')

        self.Label1_1_5 = tk.Label(self.tabMain)
        self.Label1_1_5.place(x=40, y=190, height=24, width=75)
        self.Label1_1_5.configure(activebackground="#f9f9f9")
        self.Label1_1_5.configure(activeforeground="black")
        self.Label1_1_5.configure(background="#d9d9d9")
        self.Label1_1_5.configure(disabledforeground="#a3a3a3")
        self.Label1_1_5.configure(foreground="#000000")
        self.Label1_1_5.configure(highlightbackground="#d9d9d9")
        self.Label1_1_5.configure(highlightcolor="black")
        self.Label1_1_5.configure(relief="groove")
        self.Label1_1_5.configure(text='''HEAT FFB''')

        self.Label1_1_6 = tk.Label(self.tabMain)
        self.Label1_1_6.place(x=40, y=220, height=24, width=75)
        self.Label1_1_6.configure(activebackground="#f9f9f9")
        self.Label1_1_6.configure(activeforeground="black")
        self.Label1_1_6.configure(background="#d9d9d9")
        self.Label1_1_6.configure(disabledforeground="#a3a3a3")
        self.Label1_1_6.configure(foreground="#000000")
        self.Label1_1_6.configure(highlightbackground="#d9d9d9")
        self.Label1_1_6.configure(highlightcolor="black")
        self.Label1_1_6.configure(relief="groove")
        self.Label1_1_6.configure(text='''CVM FOLD''')

        self.Label1_1_7 = tk.Label(self.tabMain)
        self.Label1_1_7.place(x=40, y=250, height=24, width=75)
        self.Label1_1_7.configure(activebackground="#f9f9f9")
        self.Label1_1_7.configure(activeforeground="black")
        self.Label1_1_7.configure(background="#d9d9d9")
        self.Label1_1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_1_7.configure(foreground="#000000")
        self.Label1_1_7.configure(highlightbackground="#d9d9d9")
        self.Label1_1_7.configure(highlightcolor="black")
        self.Label1_1_7.configure(relief="groove")
        self.Label1_1_7.configure(text='''BFD''')

        self.Label1_1_8 = tk.Label(self.tabMain)
        self.Label1_1_8.place(x=40, y=280, height=24, width=75)
        self.Label1_1_8.configure(activebackground="#f9f9f9")
        self.Label1_1_8.configure(activeforeground="black")
        self.Label1_1_8.configure(background="#d9d9d9")
        self.Label1_1_8.configure(disabledforeground="#a3a3a3")
        self.Label1_1_8.configure(foreground="#000000")
        self.Label1_1_8.configure(highlightbackground="#d9d9d9")
        self.Label1_1_8.configure(highlightcolor="black")
        self.Label1_1_8.configure(relief="groove")
        self.Label1_1_8.configure(text='''RCAM''')

        self.Label1_1_9 = tk.Label(self.tabMain)
        self.Label1_1_9.place(x=40, y=310, height=24, width=75)
        self.Label1_1_9.configure(activebackground="#f9f9f9")
        self.Label1_1_9.configure(activeforeground="black")
        self.Label1_1_9.configure(background="#d9d9d9")
        self.Label1_1_9.configure(disabledforeground="#a3a3a3")
        self.Label1_1_9.configure(foreground="#000000")
        self.Label1_1_9.configure(highlightbackground="#d9d9d9")
        self.Label1_1_9.configure(highlightcolor="black")
        self.Label1_1_9.configure(relief="groove")
        self.Label1_1_9.configure(text='''NAV ZOOM''')

        self.btnCdcEmu = tk.Button(self.tabMain)
        self.btnCdcEmu.place(x=510, y=10, height=24, width=25)
        self.btnCdcEmu.configure(activebackground="#ececec")
        self.btnCdcEmu.configure(activeforeground="#000000")
        self.btnCdcEmu.configure(background="#d9d9d9")
        self.btnCdcEmu.configure(command=self.btnCdcEmu_click)
        self.btnCdcEmu.configure(disabledforeground="#a3a3a3")
        self.btnCdcEmu.configure(font="-family {Tahoma} -size 8")
        self.btnCdcEmu.configure(foreground="#000000")
        self.btnCdcEmu.configure(highlightbackground="#d9d9d9")
        self.btnCdcEmu.configure(highlightcolor="black")
        self.btnCdcEmu.configure(pady="0")
        self.btnCdcEmu.configure(text='''|>''')

        self.btnF2P = tk.Button(self.tabMain)
        self.btnF2P.place(x=510, y=40, height=24, width=25)
        self.btnF2P.configure(activebackground="#ececec")
        self.btnF2P.configure(activeforeground="#000000")
        self.btnF2P.configure(background="#d9d9d9")
        self.btnF2P.configure(command=self.btnF2P_click)
        self.btnF2P.configure(disabledforeground="#a3a3a3")
        self.btnF2P.configure(font="-family {Tahoma} -size 8")
        self.btnF2P.configure(foreground="#000000")
        self.btnF2P.configure(highlightbackground="#d9d9d9")
        self.btnF2P.configure(highlightcolor="black")
        self.btnF2P.configure(pady="0")
        self.btnF2P.configure(text='''|>''')

        self.btnBlink = tk.Button(self.tabMain)
        self.btnBlink.place(x=510, y=70, height=24, width=25)
        self.btnBlink.configure(activebackground="#ececec")
        self.btnBlink.configure(activeforeground="#000000")
        self.btnBlink.configure(background="#d9d9d9")
        self.btnBlink.configure(command=self.btnBlink_click)
        self.btnBlink.configure(disabledforeground="#a3a3a3")
        self.btnBlink.configure(font="-family {Tahoma} -size 8")
        self.btnBlink.configure(foreground="#000000")
        self.btnBlink.configure(highlightbackground="#d9d9d9")
        self.btnBlink.configure(highlightcolor="black")
        self.btnBlink.configure(pady="0")
        self.btnBlink.configure(text='''|>''')

        self.btnFogTurn = tk.Button(self.tabMain)
        self.btnFogTurn.place(x=510, y=100, height=24, width=25)
        self.btnFogTurn.configure(activebackground="#ececec")
        self.btnFogTurn.configure(activeforeground="#000000")
        self.btnFogTurn.configure(background="#d9d9d9")
        self.btnFogTurn.configure(command=self.btnFogTurn_click)
        self.btnFogTurn.configure(disabledforeground="#a3a3a3")
        self.btnFogTurn.configure(font="-family {Tahoma} -size 8")
        self.btnFogTurn.configure(foreground="#000000")
        self.btnFogTurn.configure(highlightbackground="#d9d9d9")
        self.btnFogTurn.configure(highlightcolor="black")
        self.btnFogTurn.configure(pady="0")
        self.btnFogTurn.configure(text='''|>''')

        self.btnDrl = tk.Button(self.tabMain)
        self.btnDrl.place(x=510, y=130, height=24, width=25)
        self.btnDrl.configure(activebackground="#ececec")
        self.btnDrl.configure(activeforeground="#000000")
        self.btnDrl.configure(background="#d9d9d9")
        self.btnDrl.configure(command=self.btnDrl_click)
        self.btnDrl.configure(disabledforeground="#a3a3a3")
        self.btnDrl.configure(font="-family {Tahoma} -size 8")
        self.btnDrl.configure(foreground="#000000")
        self.btnDrl.configure(highlightbackground="#d9d9d9")
        self.btnDrl.configure(highlightcolor="black")
        self.btnDrl.configure(pady="0")
        self.btnDrl.configure(text='''|>''')

        self.btnObcDisp = tk.Button(self.tabMain)
        self.btnObcDisp.place(x=510, y=160, height=24, width=25)
        self.btnObcDisp.configure(activebackground="#ececec")
        self.btnObcDisp.configure(activeforeground="#000000")
        self.btnObcDisp.configure(background="#d9d9d9")
        self.btnObcDisp.configure(command=self.btnObcDisp_click)
        self.btnObcDisp.configure(disabledforeground="#a3a3a3")
        self.btnObcDisp.configure(font="-family {Tahoma} -size 8")
        self.btnObcDisp.configure(foreground="#000000")
        self.btnObcDisp.configure(highlightbackground="#d9d9d9")
        self.btnObcDisp.configure(highlightcolor="black")
        self.btnObcDisp.configure(pady="0")
        self.btnObcDisp.configure(text='''|>''')

        self.btnHeatFFB = tk.Button(self.tabMain)
        self.btnHeatFFB.place(x=510, y=190, height=24, width=25)
        self.btnHeatFFB.configure(activebackground="#ececec")
        self.btnHeatFFB.configure(activeforeground="#000000")
        self.btnHeatFFB.configure(background="#d9d9d9")
        self.btnHeatFFB.configure(command=self.btnHeatFFB_click)
        self.btnHeatFFB.configure(disabledforeground="#a3a3a3")
        self.btnHeatFFB.configure(font="-family {Tahoma} -size 8")
        self.btnHeatFFB.configure(foreground="#000000")
        self.btnHeatFFB.configure(highlightbackground="#d9d9d9")
        self.btnHeatFFB.configure(highlightcolor="black")
        self.btnHeatFFB.configure(pady="0")
        self.btnHeatFFB.configure(text='''|>''')

        self.btnCVMFold = tk.Button(self.tabMain)
        self.btnCVMFold.place(x=510, y=220, height=24, width=25)
        self.btnCVMFold.configure(activebackground="#ececec")
        self.btnCVMFold.configure(activeforeground="#000000")
        self.btnCVMFold.configure(background="#d9d9d9")
        self.btnCVMFold.configure(command=self.btnCVMFold_click)
        self.btnCVMFold.configure(disabledforeground="#a3a3a3")
        self.btnCVMFold.configure(font="-family {Tahoma} -size 8")
        self.btnCVMFold.configure(foreground="#000000")
        self.btnCVMFold.configure(highlightbackground="#d9d9d9")
        self.btnCVMFold.configure(highlightcolor="black")
        self.btnCVMFold.configure(pady="0")
        self.btnCVMFold.configure(text='''|>''')

        self.btnBFD = tk.Button(self.tabMain)
        self.btnBFD.place(x=510, y=250, height=24, width=25)
        self.btnBFD.configure(activebackground="#ececec")
        self.btnBFD.configure(activeforeground="#000000")
        self.btnBFD.configure(background="#d9d9d9")
        self.btnBFD.configure(command=self.btnBFD_click)
        self.btnBFD.configure(disabledforeground="#a3a3a3")
        self.btnBFD.configure(font="-family {Tahoma} -size 8")
        self.btnBFD.configure(foreground="#000000")
        self.btnBFD.configure(highlightbackground="#d9d9d9")
        self.btnBFD.configure(highlightcolor="black")
        self.btnBFD.configure(pady="0")
        self.btnBFD.configure(text='''|>''')

        self.btnRCam = tk.Button(self.tabMain)
        self.btnRCam.place(x=510, y=280, height=24, width=25)
        self.btnRCam.configure(activebackground="#ececec")
        self.btnRCam.configure(activeforeground="#000000")
        self.btnRCam.configure(background="#d9d9d9")
        self.btnRCam.configure(command=self.btnRCam_click)
        self.btnRCam.configure(disabledforeground="#a3a3a3")
        self.btnRCam.configure(font="-family {Tahoma} -size 8")
        self.btnRCam.configure(foreground="#000000")
        self.btnRCam.configure(highlightbackground="#d9d9d9")
        self.btnRCam.configure(highlightcolor="black")
        self.btnRCam.configure(pady="0")
        self.btnRCam.configure(text='''|>''')

        self.btnNavZoom = tk.Button(self.tabMain)
        self.btnNavZoom.place(x=510, y=310, height=24, width=25)
        self.btnNavZoom.configure(activebackground="#ececec")
        self.btnNavZoom.configure(activeforeground="#000000")
        self.btnNavZoom.configure(background="#d9d9d9")
        self.btnNavZoom.configure(command=self.btnNavZoom_click)
        self.btnNavZoom.configure(disabledforeground="#a3a3a3")
        self.btnNavZoom.configure(font="-family {Tahoma} -size 8")
        self.btnNavZoom.configure(foreground="#000000")
        self.btnNavZoom.configure(highlightbackground="#d9d9d9")
        self.btnNavZoom.configure(highlightcolor="black")
        self.btnNavZoom.configure(pady="0")
        self.btnNavZoom.configure(text='''|>''')

        self.tgF2PLow = tk.Checkbutton(self.tabMain)
        self.tgF2PLow.place(x=120, y=40, height=24, width=40)
        self.tgF2PLow.configure(activebackground="#d9d9d9")
        self.tgF2PLow.configure(activeforeground="#000000")
        self.tgF2PLow.configure(background="#d9d9d9")
        self.tgF2PLow.configure(command=self.tgF2PLow_click)
        self.tgF2PLow.configure(disabledforeground="#a3a3a3")
        self.tgF2PLow.configure(foreground="#000000")
        self.tgF2PLow.configure(highlightbackground="#d9d9d9")
        self.tgF2PLow.configure(highlightcolor="black")
        self.tgF2PLow.configure(indicatoron="0")
        self.tgF2PLow.configure(justify='left')
        self.tgF2PLow.configure(selectcolor="#d9d9d9")
        self.tgF2PLow.configure(text='''Low''')
        self.tgF2PLow.configure(variable=self.tgF2PLow_value)

        self.tgF2PHigh = tk.Checkbutton(self.tabMain)
        self.tgF2PHigh.place(x=165, y=40, height=24, width=40)
        self.tgF2PHigh.configure(activebackground="#d9d9d9")
        self.tgF2PHigh.configure(activeforeground="#000000")
        self.tgF2PHigh.configure(background="#d9d9d9")
        self.tgF2PHigh.configure(command=self.tgF2PHigh_click)
        self.tgF2PHigh.configure(disabledforeground="#a3a3a3")
        self.tgF2PHigh.configure(foreground="#000000")
        self.tgF2PHigh.configure(highlightbackground="#d9d9d9")
        self.tgF2PHigh.configure(highlightcolor="black")
        self.tgF2PHigh.configure(indicatoron="0")
        self.tgF2PHigh.configure(justify='left')
        self.tgF2PHigh.configure(selectcolor="#d9d9d9")
        self.tgF2PHigh.configure(text='''High''')
        self.tgF2PHigh.configure(variable=self.tgF2PHigh_value)

        self.spnBlink = tk.Spinbox(self.tabMain, from_=1.0, to=7.0)
        self.spnBlink.place(x=125, y=70, height=24, width=45)
        self.spnBlink.configure(activebackground="#f9f9f9")
        self.spnBlink.configure(background="white")
        self.spnBlink.configure(borderwidth="2")
        self.spnBlink.configure(buttonbackground="#d9d9d9")
        self.spnBlink.configure(command=self.spnBlink_click)
        self.spnBlink.configure(disabledforeground="#a3a3a3")
        self.spnBlink.configure(font="TkDefaultFont")
        self.spnBlink.configure(foreground="black")
        self.spnBlink.configure(highlightbackground="black")
        self.spnBlink.configure(highlightcolor="black")
        self.spnBlink.configure(insertbackground="black")
        self.spnBlink.configure(justify='right')
        self.spnBlink.configure(selectbackground="blue")
        self.spnBlink.configure(selectforeground="white")
        self.spnBlink.configure(validate="all")

        self.spnFogTurnSpeed = tk.Spinbox(self.tabMain, from_=5.0, to=255.0)
        self.spnFogTurnSpeed.place(x=125, y=100, height=24, width=45)
        self.spnFogTurnSpeed.configure(activebackground="#f9f9f9")
        self.spnFogTurnSpeed.configure(background="white")
        self.spnFogTurnSpeed.configure(borderwidth="2")
        self.spnFogTurnSpeed.configure(buttonbackground="#d9d9d9")
        self.spnFogTurnSpeed.configure(command=self.spnFogTurnSpeed_click)
        self.spnFogTurnSpeed.configure(disabledforeground="#a3a3a3")
        self.spnFogTurnSpeed.configure(font="TkDefaultFont")
        self.spnFogTurnSpeed.configure(foreground="black")
        self.spnFogTurnSpeed.configure(highlightbackground="black")
        self.spnFogTurnSpeed.configure(highlightcolor="black")
        self.spnFogTurnSpeed.configure(increment="5.0")
        self.spnFogTurnSpeed.configure(insertbackground="black")
        self.spnFogTurnSpeed.configure(justify='right')
        self.spnFogTurnSpeed.configure(selectbackground="blue")
        self.spnFogTurnSpeed.configure(selectforeground="white")

        self.Label2 = tk.Label(self.tabMain)
        self.Label2.place(x=170, y=100, height=24, width=35)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''km/h''')

        self.spnFogTurnTime = tk.Spinbox(self.tabMain, from_=1.0, to=30.0)
        self.spnFogTurnTime.place(x=210, y=100, height=24, width=45)
        self.spnFogTurnTime.configure(activebackground="#f9f9f9")
        self.spnFogTurnTime.configure(background="white")
        self.spnFogTurnTime.configure(borderwidth="2")
        self.spnFogTurnTime.configure(buttonbackground="#d9d9d9")
        self.spnFogTurnTime.configure(command=self.spnFogTurnTime_click)
        self.spnFogTurnTime.configure(disabledforeground="#a3a3a3")
        self.spnFogTurnTime.configure(font="TkDefaultFont")
        self.spnFogTurnTime.configure(foreground="black")
        self.spnFogTurnTime.configure(highlightbackground="black")
        self.spnFogTurnTime.configure(highlightcolor="black")
        self.spnFogTurnTime.configure(insertbackground="black")
        self.spnFogTurnTime.configure(justify='right')
        self.spnFogTurnTime.configure(selectbackground="blue")
        self.spnFogTurnTime.configure(selectforeground="white")
        self.spnFogTurnTime.configure(validate="all")

        self.Label2_1 = tk.Label(self.tabMain)
        self.Label2_1.place(x=255, y=100, height=24, width=15)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#d9d9d9")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text='''s''')

        self.tgDrlParkFront = tk.Checkbutton(self.tabMain)
        self.tgDrlParkFront.place(x=125, y=130, height=24, width=60)
        self.tgDrlParkFront.configure(activebackground="#d9d9d9")
        self.tgDrlParkFront.configure(activeforeground="#000000")
        self.tgDrlParkFront.configure(background="#d9d9d9")
        self.tgDrlParkFront.configure(command=self.tgDrlParkFront_click)
        self.tgDrlParkFront.configure(disabledforeground="#a3a3a3")
        self.tgDrlParkFront.configure(foreground="#000000")
        self.tgDrlParkFront.configure(highlightbackground="#d9d9d9")
        self.tgDrlParkFront.configure(highlightcolor="black")
        self.tgDrlParkFront.configure(indicatoron="0")
        self.tgDrlParkFront.configure(justify='left')
        self.tgDrlParkFront.configure(selectcolor="#d9d9d9")
        self.tgDrlParkFront.configure(text='''Park Front''')
        self.tgDrlParkFront.configure(variable=self.tgDrlParkFront_value)

        self.tgDrlFogFront = tk.Checkbutton(self.tabMain)
        self.tgDrlFogFront.place(x=190, y=130, height=24, width=60)
        self.tgDrlFogFront.configure(activebackground="#d9d9d9")
        self.tgDrlFogFront.configure(activeforeground="#000000")
        self.tgDrlFogFront.configure(background="#d9d9d9")
        self.tgDrlFogFront.configure(command=self.tgDrlFogFront_click)
        self.tgDrlFogFront.configure(disabledforeground="#a3a3a3")
        self.tgDrlFogFront.configure(foreground="#000000")
        self.tgDrlFogFront.configure(highlightbackground="#d9d9d9")
        self.tgDrlFogFront.configure(highlightcolor="black")
        self.tgDrlFogFront.configure(indicatoron="0")
        self.tgDrlFogFront.configure(justify='left')
        self.tgDrlFogFront.configure(selectcolor="#d9d9d9")
        self.tgDrlFogFront.configure(text='''Fog Front''')
        self.tgDrlFogFront.configure(variable=self.tgDrlFogFront_value)

        self.tgDrlParkTail = tk.Checkbutton(self.tabMain)
        self.tgDrlParkTail.place(x=255, y=130, height=24, width=60)
        self.tgDrlParkTail.configure(activebackground="#d9d9d9")
        self.tgDrlParkTail.configure(activeforeground="#000000")
        self.tgDrlParkTail.configure(background="#d9d9d9")
        self.tgDrlParkTail.configure(command=self.tgDrlParkTail_click)
        self.tgDrlParkTail.configure(disabledforeground="#a3a3a3")
        self.tgDrlParkTail.configure(foreground="#000000")
        self.tgDrlParkTail.configure(highlightbackground="#d9d9d9")
        self.tgDrlParkTail.configure(highlightcolor="black")
        self.tgDrlParkTail.configure(indicatoron="0")
        self.tgDrlParkTail.configure(justify='left')
        self.tgDrlParkTail.configure(selectcolor="#d9d9d9")
        self.tgDrlParkTail.configure(text='''Park Tail''')
        self.tgDrlParkTail.configure(variable=self.tgDrlParkTail_value)

        self.tgObcDispCoolant = tk.Checkbutton(self.tabMain)
        self.tgObcDispCoolant.place(x=125, y=160, height=24, width=50)
        self.tgObcDispCoolant.configure(activebackground="#d9d9d9")
        self.tgObcDispCoolant.configure(activeforeground="#000000")
        self.tgObcDispCoolant.configure(background="#d9d9d9")
        self.tgObcDispCoolant.configure(command=self.tgObcDispCoolant_click)
        self.tgObcDispCoolant.configure(disabledforeground="#a3a3a3")
        self.tgObcDispCoolant.configure(foreground="#000000")
        self.tgObcDispCoolant.configure(highlightbackground="#d9d9d9")
        self.tgObcDispCoolant.configure(highlightcolor="black")
        self.tgObcDispCoolant.configure(indicatoron="0")
        self.tgObcDispCoolant.configure(justify='left')
        self.tgObcDispCoolant.configure(selectcolor="#d9d9d9")
        self.tgObcDispCoolant.configure(text='''Coolant''')
        self.tgObcDispCoolant.configure(variable=self.tgObcDispCoolant_value)

        self.tgObcDispSpeed = tk.Checkbutton(self.tabMain)
        self.tgObcDispSpeed.place(x=180, y=160, height=24, width=50)
        self.tgObcDispSpeed.configure(activebackground="#d9d9d9")
        self.tgObcDispSpeed.configure(activeforeground="#000000")
        self.tgObcDispSpeed.configure(background="#d9d9d9")
        self.tgObcDispSpeed.configure(command=self.tgObcDispSpeed_click)
        self.tgObcDispSpeed.configure(disabledforeground="#a3a3a3")
        self.tgObcDispSpeed.configure(foreground="#000000")
        self.tgObcDispSpeed.configure(highlightbackground="#d9d9d9")
        self.tgObcDispSpeed.configure(highlightcolor="black")
        self.tgObcDispSpeed.configure(indicatoron="0")
        self.tgObcDispSpeed.configure(justify='left')
        self.tgObcDispSpeed.configure(selectcolor="#d9d9d9")
        self.tgObcDispSpeed.configure(text='''Speed''')
        self.tgObcDispSpeed.configure(variable=self.tgObcDispSpeed_value)

        self.tgObcDispOil = tk.Checkbutton(self.tabMain)
        self.tgObcDispOil.place(x=235, y=160, height=24, width=50)
        self.tgObcDispOil.configure(activebackground="#d9d9d9")
        self.tgObcDispOil.configure(activeforeground="#000000")
        self.tgObcDispOil.configure(background="#d9d9d9")
        self.tgObcDispOil.configure(command=self.tgObcDispOil_click)
        self.tgObcDispOil.configure(disabledforeground="#a3a3a3")
        self.tgObcDispOil.configure(foreground="#000000")
        self.tgObcDispOil.configure(highlightbackground="#d9d9d9")
        self.tgObcDispOil.configure(highlightcolor="black")
        self.tgObcDispOil.configure(indicatoron="0")
        self.tgObcDispOil.configure(justify='left')
        self.tgObcDispOil.configure(selectcolor="#d9d9d9")
        self.tgObcDispOil.configure(text='''Oiltemp''')
        self.tgObcDispOil.configure(variable=self.tgObcDispOil_value)

        self.tgObcDispVolt = tk.Checkbutton(self.tabMain)
        self.tgObcDispVolt.place(x=290, y=160, height=24, width=50)
        self.tgObcDispVolt.configure(activebackground="#d9d9d9")
        self.tgObcDispVolt.configure(activeforeground="#000000")
        self.tgObcDispVolt.configure(background="#d9d9d9")
        self.tgObcDispVolt.configure(command=self.tgObcDispVolt_click)
        self.tgObcDispVolt.configure(disabledforeground="#a3a3a3")
        self.tgObcDispVolt.configure(foreground="#000000")
        self.tgObcDispVolt.configure(highlightbackground="#d9d9d9")
        self.tgObcDispVolt.configure(highlightcolor="black")
        self.tgObcDispVolt.configure(indicatoron="0")
        self.tgObcDispVolt.configure(justify='left')
        self.tgObcDispVolt.configure(selectcolor="#d9d9d9")
        self.tgObcDispVolt.configure(text='''Volt''')
        self.tgObcDispVolt.configure(variable=self.tgObcDispVolt_value)

        self.tgObcDispFive = tk.Checkbutton(self.tabMain)
        self.tgObcDispFive.place(x=345, y=160, height=24, width=35)
        self.tgObcDispFive.configure(activebackground="#d9d9d9")
        self.tgObcDispFive.configure(activeforeground="#000000")
        self.tgObcDispFive.configure(background="#d9d9d9")
        self.tgObcDispFive.configure(command=self.tgObcDispFive_click)
        self.tgObcDispFive.configure(disabledforeground="#a3a3a3")
        self.tgObcDispFive.configure(foreground="#000000")
        self.tgObcDispFive.configure(highlightbackground="#d9d9d9")
        self.tgObcDispFive.configure(highlightcolor="black")
        self.tgObcDispFive.configure(indicatoron="0")
        self.tgObcDispFive.configure(justify='left')
        self.tgObcDispFive.configure(selectcolor="#d9d9d9")
        self.tgObcDispFive.configure(text='''Five''')
        self.tgObcDispFive.configure(variable=self.tgObcDispFive_value)

        self.tgObcDispSix = tk.Checkbutton(self.tabMain)
        self.tgObcDispSix.place(x=385, y=160, height=24, width=35)
        self.tgObcDispSix.configure(activebackground="#d9d9d9")
        self.tgObcDispSix.configure(activeforeground="#000000")
        self.tgObcDispSix.configure(background="#d9d9d9")
        self.tgObcDispSix.configure(command=self.tgObcDispSix_click)
        self.tgObcDispSix.configure(disabledforeground="#a3a3a3")
        self.tgObcDispSix.configure(foreground="#000000")
        self.tgObcDispSix.configure(highlightbackground="#d9d9d9")
        self.tgObcDispSix.configure(highlightcolor="black")
        self.tgObcDispSix.configure(indicatoron="0")
        self.tgObcDispSix.configure(justify='left')
        self.tgObcDispSix.configure(selectcolor="#d9d9d9")
        self.tgObcDispSix.configure(text='''Six''')
        self.tgObcDispSix.configure(variable=self.tgObcDispSix_value)

        self.tgObcDispSeven = tk.Checkbutton(self.tabMain)
        self.tgObcDispSeven.place(x=425, y=160, height=24, width=35)
        self.tgObcDispSeven.configure(activebackground="#d9d9d9")
        self.tgObcDispSeven.configure(activeforeground="#000000")
        self.tgObcDispSeven.configure(background="#d9d9d9")
        self.tgObcDispSeven.configure(command=self.tgObcDispSeven_click)
        self.tgObcDispSeven.configure(disabledforeground="#a3a3a3")
        self.tgObcDispSeven.configure(foreground="#000000")
        self.tgObcDispSeven.configure(highlightbackground="#d9d9d9")
        self.tgObcDispSeven.configure(highlightcolor="black")
        self.tgObcDispSeven.configure(indicatoron="0")
        self.tgObcDispSeven.configure(justify='left')
        self.tgObcDispSeven.configure(selectcolor="#d9d9d9")
        self.tgObcDispSeven.configure(text='''Seven''')
        self.tgObcDispSeven.configure(variable=self.tgObcDispSeven_value)

        self.spnBFDTime = tk.Spinbox(self.tabMain, from_=1.0, to=7.0)
        self.spnBFDTime.place(x=120, y=250, height=24, width=45)
        self.spnBFDTime.configure(activebackground="#f9f9f9")
        self.spnBFDTime.configure(background="white")
        self.spnBFDTime.configure(borderwidth="2")
        self.spnBFDTime.configure(buttonbackground="#d9d9d9")
        self.spnBFDTime.configure(command=self.spnBFDTime_click)
        self.spnBFDTime.configure(disabledforeground="#a3a3a3")
        self.spnBFDTime.configure(font="TkDefaultFont")
        self.spnBFDTime.configure(foreground="black")
        self.spnBFDTime.configure(highlightbackground="black")
        self.spnBFDTime.configure(highlightcolor="black")
        self.spnBFDTime.configure(insertbackground="black")
        self.spnBFDTime.configure(justify='right')
        self.spnBFDTime.configure(selectbackground="blue")
        self.spnBFDTime.configure(selectforeground="white")
        #self.spnBFDTime_change = self.spnBFDTime.register(self.spnBFDTime_change)
        self.spnBFDTime.configure(validatecommand=(self.spnBFDTime_change, '%V'))

        self.Label2_1_1 = tk.Label(self.tabMain)
        self.Label2_1_1.place(x=165, y=250, height=24, width=15)
        self.Label2_1_1.configure(activebackground="#f9f9f9")
        self.Label2_1_1.configure(activeforeground="black")
        self.Label2_1_1.configure(background="#d9d9d9")
        self.Label2_1_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1_1.configure(foreground="#000000")
        self.Label2_1_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1_1.configure(highlightcolor="black")
        self.Label2_1_1.configure(text='''s''')

        self.spnRCamSpeed = tk.Spinbox(self.tabMain, from_=1.0, to=255.0)
        self.spnRCamSpeed.place(x=120, y=280, height=24, width=45)
        self.spnRCamSpeed.configure(activebackground="#f9f9f9")
        self.spnRCamSpeed.configure(background="white")
        self.spnRCamSpeed.configure(borderwidth="2")
        self.spnRCamSpeed.configure(buttonbackground="#d9d9d9")
        self.spnRCamSpeed.configure(disabledforeground="#a3a3a3")
        self.spnRCamSpeed.configure(font="TkDefaultFont")
        self.spnRCamSpeed.configure(foreground="black")
        self.spnRCamSpeed.configure(highlightbackground="black")
        self.spnRCamSpeed.configure(highlightcolor="black")
        self.spnRCamSpeed.configure(insertbackground="black")
        self.spnRCamSpeed.configure(justify='right')
        self.spnRCamSpeed.configure(selectbackground="blue")
        self.spnRCamSpeed.configure(selectforeground="white")
        self.spnRCamSpeed.configure(validate="all")

        self.spnRCamTime = tk.Spinbox(self.tabMain, from_=1.0, to=255.0)
        self.spnRCamTime.place(x=205, y=280, height=24, width=45)
        self.spnRCamTime.configure(activebackground="#f9f9f9")
        self.spnRCamTime.configure(background="white")
        self.spnRCamTime.configure(borderwidth="2")
        self.spnRCamTime.configure(buttonbackground="#d9d9d9")
        self.spnRCamTime.configure(command=self.spnRCamTime_click)
        self.spnRCamTime.configure(disabledforeground="#a3a3a3")
        self.spnRCamTime.configure(font="TkDefaultFont")
        self.spnRCamTime.configure(foreground="black")
        self.spnRCamTime.configure(highlightbackground="black")
        self.spnRCamTime.configure(highlightcolor="black")
        self.spnRCamTime.configure(insertbackground="black")
        self.spnRCamTime.configure(justify='right')
        self.spnRCamTime.configure(selectbackground="blue")
        self.spnRCamTime.configure(selectforeground="white")

        self.Label2_2 = tk.Label(self.tabMain)
        self.Label2_2.place(x=165, y=280, height=24, width=35)
        self.Label2_2.configure(activebackground="#f9f9f9")
        self.Label2_2.configure(activeforeground="black")
        self.Label2_2.configure(background="#d9d9d9")
        self.Label2_2.configure(disabledforeground="#a3a3a3")
        self.Label2_2.configure(foreground="#000000")
        self.Label2_2.configure(highlightbackground="#d9d9d9")
        self.Label2_2.configure(highlightcolor="black")
        self.Label2_2.configure(text='''km/h''')

        self.Label2_1_2 = tk.Label(self.tabMain)
        self.Label2_1_2.place(x=250, y=280, height=24, width=15)
        self.Label2_1_2.configure(activebackground="#f9f9f9")
        self.Label2_1_2.configure(activeforeground="black")
        self.Label2_1_2.configure(background="#d9d9d9")
        self.Label2_1_2.configure(disabledforeground="#a3a3a3")
        self.Label2_1_2.configure(foreground="#000000")
        self.Label2_1_2.configure(highlightbackground="#d9d9d9")
        self.Label2_1_2.configure(highlightcolor="black")
        self.Label2_1_2.configure(text='''s''')

        self.tgObcDispEight = tk.Checkbutton(self.tabMain)
        self.tgObcDispEight.place(x=470, y=160, height=24, width=35)
        self.tgObcDispEight.configure(activebackground="#d9d9d9")
        self.tgObcDispEight.configure(activeforeground="#000000")
        self.tgObcDispEight.configure(background="#d9d9d9")
        self.tgObcDispEight.configure(command=self.tgObcDispEight_click)
        self.tgObcDispEight.configure(disabledforeground="#a3a3a3")
        self.tgObcDispEight.configure(foreground="#000000")
        self.tgObcDispEight.configure(highlightbackground="#d9d9d9")
        self.tgObcDispEight.configure(highlightcolor="black")
        self.tgObcDispEight.configure(indicatoron="0")
        self.tgObcDispEight.configure(justify='left')
        self.tgObcDispEight.configure(selectcolor="#d9d9d9")
        self.tgObcDispEight.configure(text='''Eight''')
        self.tgObcDispEight.configure(variable=self.tgObcDispEight_value)

        self.Label1_2 = tk.Label(self.tabSettings)
        self.Label1_2.place(x=40, y=10, height=24, width=75)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#d9d9d9")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(relief="groove")
        self.Label1_2.configure(text='''EXT. RXTX''')

        self.Label1_2_1 = tk.Label(self.tabSettings)
        self.Label1_2_1.place(x=40, y=40, height=24, width=75)
        self.Label1_2_1.configure(activebackground="#f9f9f9")
        self.Label1_2_1.configure(activeforeground="black")
        self.Label1_2_1.configure(background="#d9d9d9")
        self.Label1_2_1.configure(disabledforeground="#a3a3a3")
        self.Label1_2_1.configure(foreground="#000000")
        self.Label1_2_1.configure(highlightbackground="#d9d9d9")
        self.Label1_2_1.configure(highlightcolor="black")
        self.Label1_2_1.configure(relief="groove")
        self.Label1_2_1.configure(text='''NTW MODE''')

        self.Label1_2_2 = tk.Label(self.tabSettings)
        self.Label1_2_2.place(x=40, y=70, height=24, width=75)
        self.Label1_2_2.configure(activebackground="#f9f9f9")
        self.Label1_2_2.configure(activeforeground="black")
        self.Label1_2_2.configure(background="#d9d9d9")
        self.Label1_2_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2_2.configure(foreground="#000000")
        self.Label1_2_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2_2.configure(highlightcolor="black")
        self.Label1_2_2.configure(relief="groove")
        self.Label1_2_2.configure(text='''TIME OFF''')

        self.lblNtwkMode = tk.Label(self.tabSettings)
        self.lblNtwkMode.place(x=120, y=40, height=24, width=40)
        self.lblNtwkMode.configure(activebackground="#f9f9f9")
        self.lblNtwkMode.configure(activeforeground="black")
        self.lblNtwkMode.configure(background="#d9d9d9")
        self.lblNtwkMode.configure(disabledforeground="#a3a3a3")
        self.lblNtwkMode.configure(foreground="#000000")
        self.lblNtwkMode.configure(highlightbackground="#d9d9d9")
        self.lblNtwkMode.configure(highlightcolor="black")
        self.lblNtwkMode.configure(relief="groove")
        self.lblNtwkMode.configure(text='''GM/0''')

        self.tgRxTxRx = tk.Checkbutton(self.tabSettings)
        self.tgRxTxRx.place(x=120, y=10, height=24, width=40)
        self.tgRxTxRx.configure(activebackground="#d9d9d9")
        self.tgRxTxRx.configure(activeforeground="#000000")
        self.tgRxTxRx.configure(background="#d9d9d9")
        self.tgRxTxRx.configure(command=self.tgRxTxRx_click)
        self.tgRxTxRx.configure(disabledforeground="#a3a3a3")
        self.tgRxTxRx.configure(foreground="#000000")
        self.tgRxTxRx.configure(highlightbackground="#d9d9d9")
        self.tgRxTxRx.configure(highlightcolor="black")
        self.tgRxTxRx.configure(indicatoron="0")
        self.tgRxTxRx.configure(justify='left')
        self.tgRxTxRx.configure(selectcolor="#d9d9d9")
        self.tgRxTxRx.configure(text='''RX''')
        self.tgRxTxRx.configure(variable=self.tgRxTxRx_value)

        self.tgRxTxTx = tk.Checkbutton(self.tabSettings)
        self.tgRxTxTx.place(x=165, y=10, height=24, width=40)
        self.tgRxTxTx.configure(activebackground="#d9d9d9")
        self.tgRxTxTx.configure(activeforeground="#000000")
        self.tgRxTxTx.configure(background="#d9d9d9")
        self.tgRxTxTx.configure(command=self.tgRxTxTx_click)
        self.tgRxTxTx.configure(disabledforeground="#a3a3a3")
        self.tgRxTxTx.configure(foreground="#000000")
        self.tgRxTxTx.configure(highlightbackground="#d9d9d9")
        self.tgRxTxTx.configure(highlightcolor="black")
        self.tgRxTxTx.configure(indicatoron="0")
        self.tgRxTxTx.configure(justify='left')
        self.tgRxTxTx.configure(selectcolor="#d9d9d9")
        self.tgRxTxTx.configure(text='''TX''')
        self.tgRxTxTx.configure(variable=self.tgRxTxTx_value)

        self.spnRxTxTime = tk.Spinbox(self.tabSettings, from_=1.0, to=30.0)
        self.spnRxTxTime.place(x=210, y=10, height=24, width=45)
        self.spnRxTxTime.configure(activebackground="#f9f9f9")
        self.spnRxTxTime.configure(background="white")
        self.spnRxTxTime.configure(borderwidth="2")
        self.spnRxTxTime.configure(buttonbackground="#d9d9d9")
        self.spnRxTxTime.configure(command=self.spnRxTxTime_click)
        self.spnRxTxTime.configure(disabledforeground="#a3a3a3")
        self.spnRxTxTime.configure(font="TkDefaultFont")
        self.spnRxTxTime.configure(foreground="black")
        self.spnRxTxTime.configure(highlightbackground="black")
        self.spnRxTxTime.configure(highlightcolor="black")
        self.spnRxTxTime.configure(insertbackground="black")
        self.spnRxTxTime.configure(justify='right')
        self.spnRxTxTime.configure(selectbackground="blue")
        self.spnRxTxTime.configure(selectforeground="white")
        self.spnRxTxTime.configure(validate="all")

        self.Label2_1_3 = tk.Label(self.tabSettings)
        self.Label2_1_3.place(x=255, y=10, height=24, width=20)
        self.Label2_1_3.configure(activebackground="#f9f9f9")
        self.Label2_1_3.configure(activeforeground="black")
        self.Label2_1_3.configure(background="#d9d9d9")
        self.Label2_1_3.configure(disabledforeground="#a3a3a3")
        self.Label2_1_3.configure(foreground="#000000")
        self.Label2_1_3.configure(highlightbackground="#d9d9d9")
        self.Label2_1_3.configure(highlightcolor="black")
        self.Label2_1_3.configure(text='''ms''')

        self.spnNtwkMode = tk.Spinbox(self.tabSettings, from_=1.0, to=30.0)
        self.spnNtwkMode.place(x=165, y=40, height=24, width=45)
        self.spnNtwkMode.configure(activebackground="#f9f9f9")
        self.spnNtwkMode.configure(background="white")
        self.spnNtwkMode.configure(borderwidth="2")
        self.spnNtwkMode.configure(buttonbackground="#d9d9d9")
        self.spnNtwkMode.configure(command=self.spnNtwkMode_click)
        self.spnNtwkMode.configure(disabledforeground="#a3a3a3")
        self.spnNtwkMode.configure(font="TkDefaultFont")
        self.spnNtwkMode.configure(foreground="black")
        self.spnNtwkMode.configure(highlightbackground="black")
        self.spnNtwkMode.configure(highlightcolor="black")
        self.spnNtwkMode.configure(insertbackground="black")
        self.spnNtwkMode.configure(justify='right')
        self.spnNtwkMode.configure(selectbackground="blue")
        self.spnNtwkMode.configure(selectforeground="white")
        self.spnNtwkMode.configure(validate="all")

        self.spnTimeOff = tk.Spinbox(self.tabSettings, from_=1.0, to=30.0)
        self.spnTimeOff.place(x=120, y=70, height=24, width=45)
        self.spnTimeOff.configure(activebackground="#f9f9f9")
        self.spnTimeOff.configure(background="white")
        self.spnTimeOff.configure(borderwidth="2")
        self.spnTimeOff.configure(buttonbackground="#d9d9d9")
        self.spnTimeOff.configure(command=self.spnTimeOff_click)
        self.spnTimeOff.configure(disabledforeground="#a3a3a3")
        self.spnTimeOff.configure(font="TkDefaultFont")
        self.spnTimeOff.configure(foreground="black")
        self.spnTimeOff.configure(highlightbackground="black")
        self.spnTimeOff.configure(highlightcolor="black")
        self.spnTimeOff.configure(insertbackground="black")
        self.spnTimeOff.configure(justify='right')
        self.spnTimeOff.configure(selectbackground="blue")
        self.spnTimeOff.configure(selectforeground="white")
        self.spnTimeOff.configure(validate="all")

        self.Label2_1_3_1 = tk.Label(self.tabSettings)
        self.Label2_1_3_1.place(x=165, y=70, height=24, width=25)
        self.Label2_1_3_1.configure(activebackground="#f9f9f9")
        self.Label2_1_3_1.configure(activeforeground="black")
        self.Label2_1_3_1.configure(background="#d9d9d9")
        self.Label2_1_3_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1_3_1.configure(foreground="#000000")
        self.Label2_1_3_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1_3_1.configure(highlightcolor="black")
        self.Label2_1_3_1.configure(text='''min''')

        self.btnRxTx = tk.Button(self.tabSettings)
        self.btnRxTx.place(x=510, y=10, height=24, width=25)
        self.btnRxTx.configure(activebackground="#ececec")
        self.btnRxTx.configure(activeforeground="#000000")
        self.btnRxTx.configure(background="#d9d9d9")
        self.btnRxTx.configure(command=self.btnRxTx_click)
        self.btnRxTx.configure(disabledforeground="#a3a3a3")
        self.btnRxTx.configure(font="-family {Tahoma} -size 8")
        self.btnRxTx.configure(foreground="#000000")
        self.btnRxTx.configure(highlightbackground="#d9d9d9")
        self.btnRxTx.configure(highlightcolor="black")
        self.btnRxTx.configure(pady="0")
        self.btnRxTx.configure(text='''|>''')

        self.btnNtwkMode = tk.Button(self.tabSettings)
        self.btnNtwkMode.place(x=510, y=40, height=24, width=25)
        self.btnNtwkMode.configure(activebackground="#ececec")
        self.btnNtwkMode.configure(activeforeground="#000000")
        self.btnNtwkMode.configure(background="#d9d9d9")
        self.btnNtwkMode.configure(command=self.btnNtwkMode_click)
        self.btnNtwkMode.configure(disabledforeground="#a3a3a3")
        self.btnNtwkMode.configure(font="-family {Tahoma} -size 8")
        self.btnNtwkMode.configure(foreground="#000000")
        self.btnNtwkMode.configure(highlightbackground="#d9d9d9")
        self.btnNtwkMode.configure(highlightcolor="black")
        self.btnNtwkMode.configure(pady="0")
        self.btnNtwkMode.configure(text='''|>''')

        self.btnTimeOff = tk.Button(self.tabSettings)
        self.btnTimeOff.place(x=510, y=70, height=24, width=25)
        self.btnTimeOff.configure(activebackground="#ececec")
        self.btnTimeOff.configure(activeforeground="#000000")
        self.btnTimeOff.configure(background="#d9d9d9")
        self.btnTimeOff.configure(command=self.btnTimeOff_click)
        self.btnTimeOff.configure(disabledforeground="#a3a3a3")
        self.btnTimeOff.configure(font="-family {Tahoma} -size 8")
        self.btnTimeOff.configure(foreground="#000000")
        self.btnTimeOff.configure(highlightbackground="#d9d9d9")
        self.btnTimeOff.configure(highlightcolor="black")
        self.btnTimeOff.configure(pady="0")
        self.btnTimeOff.configure(text='''|>''')

        self.tgWelMsg = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelMsg.place(x=10, y=10, height=24, width=25)
        self.tgWelMsg.configure(activebackground="#d9d9d9")
        self.tgWelMsg.configure(activeforeground="#000000")
        self.tgWelMsg.configure(background="#d9d9d9")
        self.tgWelMsg.configure(command=self.tgWelMsg_click)
        self.tgWelMsg.configure(disabledforeground="#a3a3a3")
        self.tgWelMsg.configure(foreground="#000000")
        self.tgWelMsg.configure(highlightbackground="#d9d9d9")
        self.tgWelMsg.configure(highlightcolor="black")
        self.tgWelMsg.configure(indicatoron="0")
        self.tgWelMsg.configure(justify='left')
        self.tgWelMsg.configure(selectcolor="#d9d9d9")
        self.tgWelMsg.configure(variable=self.tgWelMsg_value)

        self.tgWelLight = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLight.place(x=10, y=70, height=24, width=25)
        self.tgWelLight.configure(activebackground="#d9d9d9")
        self.tgWelLight.configure(activeforeground="#000000")
        self.tgWelLight.configure(background="#d9d9d9")
        self.tgWelLight.configure(command=self.tgWelLight_click)
        self.tgWelLight.configure(disabledforeground="#a3a3a3")
        self.tgWelLight.configure(foreground="#000000")
        self.tgWelLight.configure(highlightbackground="#d9d9d9")
        self.tgWelLight.configure(highlightcolor="black")
        self.tgWelLight.configure(indicatoron="0")
        self.tgWelLight.configure(justify='left')
        self.tgWelLight.configure(selectcolor="#d9d9d9")
        self.tgWelLight.configure(variable=self.tgWelLight_value)

        self.Label1_2_3 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_3.place(x=40, y=10, height=24, width=75)
        self.Label1_2_3.configure(activebackground="#f9f9f9")
        self.Label1_2_3.configure(activeforeground="black")
        self.Label1_2_3.configure(background="#d9d9d9")
        self.Label1_2_3.configure(disabledforeground="#a3a3a3")
        self.Label1_2_3.configure(foreground="#000000")
        self.Label1_2_3.configure(highlightbackground="#d9d9d9")
        self.Label1_2_3.configure(highlightcolor="black")
        self.Label1_2_3.configure(relief="groove")
        self.Label1_2_3.configure(text='''WEL MSG''')

        self.Label1_2_4 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_4.place(x=40, y=40, height=24, width=75)
        self.Label1_2_4.configure(activebackground="#f9f9f9")
        self.Label1_2_4.configure(activeforeground="black")
        self.Label1_2_4.configure(background="#d9d9d9")
        self.Label1_2_4.configure(disabledforeground="#a3a3a3")
        self.Label1_2_4.configure(foreground="#000000")
        self.Label1_2_4.configure(highlightbackground="#d9d9d9")
        self.Label1_2_4.configure(highlightcolor="black")
        self.Label1_2_4.configure(relief="groove")
        self.Label1_2_4.configure(text='''WEL MSG T''')

        self.Label1_2_5 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_5.place(x=40, y=70, height=24, width=75)
        self.Label1_2_5.configure(activebackground="#f9f9f9")
        self.Label1_2_5.configure(activeforeground="black")
        self.Label1_2_5.configure(background="#d9d9d9")
        self.Label1_2_5.configure(disabledforeground="#a3a3a3")
        self.Label1_2_5.configure(foreground="#000000")
        self.Label1_2_5.configure(highlightbackground="#d9d9d9")
        self.Label1_2_5.configure(highlightcolor="black")
        self.Label1_2_5.configure(relief="groove")
        self.Label1_2_5.configure(text='''WEL LIGHT''')

        self.Label1_2_6 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_6.place(x=40, y=100, height=24, width=75)
        self.Label1_2_6.configure(activebackground="#f9f9f9")
        self.Label1_2_6.configure(activeforeground="black")
        self.Label1_2_6.configure(background="#d9d9d9")
        self.Label1_2_6.configure(disabledforeground="#a3a3a3")
        self.Label1_2_6.configure(foreground="#000000")
        self.Label1_2_6.configure(highlightbackground="#d9d9d9")
        self.Label1_2_6.configure(highlightcolor="black")
        self.Label1_2_6.configure(relief="groove")
        self.Label1_2_6.configure(text='''LEV LIGHT''')

        self.Label1_2_7 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_7.place(x=40, y=130, height=24, width=75)
        self.Label1_2_7.configure(activebackground="#f9f9f9")
        self.Label1_2_7.configure(activeforeground="black")
        self.Label1_2_7.configure(background="#d9d9d9")
        self.Label1_2_7.configure(disabledforeground="#a3a3a3")
        self.Label1_2_7.configure(foreground="#000000")
        self.Label1_2_7.configure(highlightbackground="#d9d9d9")
        self.Label1_2_7.configure(highlightcolor="black")
        self.Label1_2_7.configure(relief="groove")
        self.Label1_2_7.configure(text='''SENSOR''')

        self.Label1_2_8 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_8.place(x=40, y=160, height=24, width=75)
        self.Label1_2_8.configure(activebackground="#f9f9f9")
        self.Label1_2_8.configure(activeforeground="black")
        self.Label1_2_8.configure(background="#d9d9d9")
        self.Label1_2_8.configure(disabledforeground="#a3a3a3")
        self.Label1_2_8.configure(foreground="#000000")
        self.Label1_2_8.configure(highlightbackground="#d9d9d9")
        self.Label1_2_8.configure(highlightcolor="black")
        self.Label1_2_8.configure(relief="groove")
        self.Label1_2_8.configure(text='''LIGHT PARK''')

        self.Label1_2_9 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_9.place(x=40, y=190, height=24, width=75)
        self.Label1_2_9.configure(activebackground="#f9f9f9")
        self.Label1_2_9.configure(activeforeground="black")
        self.Label1_2_9.configure(background="#d9d9d9")
        self.Label1_2_9.configure(disabledforeground="#a3a3a3")
        self.Label1_2_9.configure(foreground="#000000")
        self.Label1_2_9.configure(highlightbackground="#d9d9d9")
        self.Label1_2_9.configure(highlightcolor="black")
        self.Label1_2_9.configure(relief="groove")
        self.Label1_2_9.configure(text='''LIGHT BEAM''')

        self.Label1_2_10 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_10.place(x=40, y=220, height=24, width=75)
        self.Label1_2_10.configure(activebackground="#f9f9f9")
        self.Label1_2_10.configure(activeforeground="black")
        self.Label1_2_10.configure(background="#d9d9d9")
        self.Label1_2_10.configure(disabledforeground="#a3a3a3")
        self.Label1_2_10.configure(foreground="#000000")
        self.Label1_2_10.configure(highlightbackground="#d9d9d9")
        self.Label1_2_10.configure(highlightcolor="black")
        self.Label1_2_10.configure(relief="groove")
        self.Label1_2_10.configure(text='''LIGHT TURN''')

        self.Label1_2_11 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_11.place(x=40, y=250, height=24, width=75)
        self.Label1_2_11.configure(activebackground="#f9f9f9")
        self.Label1_2_11.configure(activeforeground="black")
        self.Label1_2_11.configure(background="#d9d9d9")
        self.Label1_2_11.configure(disabledforeground="#a3a3a3")
        self.Label1_2_11.configure(foreground="#000000")
        self.Label1_2_11.configure(highlightbackground="#d9d9d9")
        self.Label1_2_11.configure(highlightcolor="black")
        self.Label1_2_11.configure(relief="groove")
        self.Label1_2_11.configure(text='''LIGHT OTH.''')

        self.Label1_2_12 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_12.place(x=40, y=280, height=24, width=75)
        self.Label1_2_12.configure(activebackground="#f9f9f9")
        self.Label1_2_12.configure(activeforeground="black")
        self.Label1_2_12.configure(background="#d9d9d9")
        self.Label1_2_12.configure(disabledforeground="#a3a3a3")
        self.Label1_2_12.configure(foreground="#000000")
        self.Label1_2_12.configure(highlightbackground="#d9d9d9")
        self.Label1_2_12.configure(highlightcolor="black")
        self.Label1_2_12.configure(relief="groove")
        self.Label1_2_12.configure(text='''MIR FOLD''')

        self.tgLevLight = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLevLight.place(x=10, y=100, height=24, width=25)
        self.tgLevLight.configure(activebackground="#d9d9d9")
        self.tgLevLight.configure(activeforeground="#000000")
        self.tgLevLight.configure(background="#d9d9d9")
        self.tgLevLight.configure(command=self.tgLevLight_click)
        self.tgLevLight.configure(disabledforeground="#a3a3a3")
        self.tgLevLight.configure(foreground="#000000")
        self.tgLevLight.configure(highlightbackground="#d9d9d9")
        self.tgLevLight.configure(highlightcolor="black")
        self.tgLevLight.configure(indicatoron="0")
        self.tgLevLight.configure(justify='left')
        self.tgLevLight.configure(selectcolor="#d9d9d9")
        self.tgLevLight.configure(variable=self.tgLevLight_value)

        self.tgSenVal = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgSenVal.place(x=10, y=130, height=24, width=25)
        self.tgSenVal.configure(activebackground="#d9d9d9")
        self.tgSenVal.configure(activeforeground="#000000")
        self.tgSenVal.configure(background="#d9d9d9")
        self.tgSenVal.configure(command=self.tgSenVal_click)
        self.tgSenVal.configure(disabledforeground="#a3a3a3")
        self.tgSenVal.configure(foreground="#000000")
        self.tgSenVal.configure(highlightbackground="#d9d9d9")
        self.tgSenVal.configure(highlightcolor="black")
        self.tgSenVal.configure(indicatoron="0")
        self.tgSenVal.configure(justify='left')
        self.tgSenVal.configure(selectcolor="#d9d9d9")
        self.tgSenVal.configure(variable=self.tgSenVal_value)

        self.txtWelMsg = tk.Entry(self.tabWelcomeLeaving)
        self.txtWelMsg.place(x=120, y=40, height=24, width=239)
        self.txtWelMsg.configure(background="white")
        self.txtWelMsg.configure(borderwidth="2")
        self.txtWelMsg.configure(disabledforeground="#a3a3a3")
        self.txtWelMsg.configure(font="TkFixedFont")
        self.txtWelMsg.configure(foreground="#000000")
        self.txtWelMsg.configure(highlightbackground="#d9d9d9")
        self.txtWelMsg.configure(highlightcolor="black")
        self.txtWelMsg.configure(insertbackground="black")
        self.txtWelMsg.configure(selectbackground="blue")
        self.txtWelMsg.configure(selectforeground="white")
        self.txtWelMsg.configure(textvariable=self.txtWelMsg_value)
        self.txtWelMsg.configure(validate="all")
        txtWelMsg_change = self.txtWelMsg.register(self.txtWelMsg_change)
        self.txtWelMsg.configure(validatecommand=(txtWelMsg_change))

        self.lblWelMsgLen = tk.Label(self.tabWelcomeLeaving)
        self.lblWelMsgLen.place(x=360, y=40, height=24, width=25)
        self.lblWelMsgLen.configure(activebackground="#f9f9f9")
        self.lblWelMsgLen.configure(activeforeground="black")
        self.lblWelMsgLen.configure(background="#d9d9d9")
        self.lblWelMsgLen.configure(disabledforeground="#a3a3a3")
        self.lblWelMsgLen.configure(foreground="#000000")
        self.lblWelMsgLen.configure(highlightbackground="#d9d9d9")
        self.lblWelMsgLen.configure(highlightcolor="black")
        self.lblWelMsgLen.configure(text='''(9)''')
        self.lblWelMsgLen.configure(textvariable=self.lblWelMsgLen_value)

        self.spnWelLightTime = tk.Spinbox(self.tabWelcomeLeaving, from_=1.0, to=30.0)
        self.spnWelLightTime.place(x=120, y=70, height=24, width=45)
        self.spnWelLightTime.configure(activebackground="#f9f9f9")
        self.spnWelLightTime.configure(background="white")
        self.spnWelLightTime.configure(borderwidth="2")
        self.spnWelLightTime.configure(buttonbackground="#d9d9d9")
        self.spnWelLightTime.configure(command=self.spnWelLightTime_click)
        self.spnWelLightTime.configure(disabledforeground="#a3a3a3")
        self.spnWelLightTime.configure(font="TkDefaultFont")
        self.spnWelLightTime.configure(foreground="black")
        self.spnWelLightTime.configure(highlightbackground="black")
        self.spnWelLightTime.configure(highlightcolor="black")
        self.spnWelLightTime.configure(insertbackground="black")
        self.spnWelLightTime.configure(justify='right')
        self.spnWelLightTime.configure(selectbackground="blue")
        self.spnWelLightTime.configure(selectforeground="white")
        self.spnWelLightTime.configure(validate="all")

        self.Label2_1_1_1 = tk.Label(self.tabWelcomeLeaving)
        self.Label2_1_1_1.place(x=165, y=70, height=24, width=15)
        self.Label2_1_1_1.configure(activebackground="#f9f9f9")
        self.Label2_1_1_1.configure(activeforeground="black")
        self.Label2_1_1_1.configure(background="#d9d9d9")
        self.Label2_1_1_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1_1_1.configure(foreground="#000000")
        self.Label2_1_1_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1_1_1.configure(highlightcolor="black")
        self.Label2_1_1_1.configure(text='''s''')

        self.Label2_1_1_2 = tk.Label(self.tabWelcomeLeaving)
        self.Label2_1_1_2.place(x=165, y=100, height=24, width=15)
        self.Label2_1_1_2.configure(activebackground="#f9f9f9")
        self.Label2_1_1_2.configure(activeforeground="black")
        self.Label2_1_1_2.configure(background="#d9d9d9")
        self.Label2_1_1_2.configure(disabledforeground="#a3a3a3")
        self.Label2_1_1_2.configure(foreground="#000000")
        self.Label2_1_1_2.configure(highlightbackground="#d9d9d9")
        self.Label2_1_1_2.configure(highlightcolor="black")
        self.Label2_1_1_2.configure(text='''s''')

        self.spnLevLightTime = tk.Spinbox(self.tabWelcomeLeaving, from_=1.0, to=30.0)
        self.spnLevLightTime.place(x=120, y=100, height=24, width=45)
        self.spnLevLightTime.configure(activebackground="#f9f9f9")
        self.spnLevLightTime.configure(background="white")
        self.spnLevLightTime.configure(borderwidth="2")
        self.spnLevLightTime.configure(buttonbackground="#d9d9d9")
        self.spnLevLightTime.configure(command=self.spnLevLightTime_click)
        self.spnLevLightTime.configure(disabledforeground="#a3a3a3")
        self.spnLevLightTime.configure(font="TkDefaultFont")
        self.spnLevLightTime.configure(foreground="black")
        self.spnLevLightTime.configure(highlightbackground="black")
        self.spnLevLightTime.configure(highlightcolor="black")
        self.spnLevLightTime.configure(insertbackground="black")
        self.spnLevLightTime.configure(justify='right')
        self.spnLevLightTime.configure(selectbackground="blue")
        self.spnLevLightTime.configure(selectforeground="white")
        self.spnLevLightTime.configure(validate="all")

        self.Label1_2_12_1 = tk.Label(self.tabWelcomeLeaving)
        self.Label1_2_12_1.place(x=180, y=70, height=24, width=55)
        self.Label1_2_12_1.configure(activebackground="#f9f9f9")
        self.Label1_2_12_1.configure(activeforeground="black")
        self.Label1_2_12_1.configure(background="#d9d9d9")
        self.Label1_2_12_1.configure(disabledforeground="#a3a3a3")
        self.Label1_2_12_1.configure(foreground="#000000")
        self.Label1_2_12_1.configure(highlightbackground="#d9d9d9")
        self.Label1_2_12_1.configure(highlightcolor="black")
        self.Label1_2_12_1.configure(relief="groove")
        self.Label1_2_12_1.configure(text='''CANCEL''')

        self.tgWelLightCancelIgn3 = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLightCancelIgn3.place(x=240, y=70, height=24, width=45)
        self.tgWelLightCancelIgn3.configure(activebackground="#d9d9d9")
        self.tgWelLightCancelIgn3.configure(activeforeground="#000000")
        self.tgWelLightCancelIgn3.configure(background="#d9d9d9")
        self.tgWelLightCancelIgn3.configure(command=self.tgWelLightCancelIgn3_click)
        self.tgWelLightCancelIgn3.configure(disabledforeground="#a3a3a3")
        self.tgWelLightCancelIgn3.configure(foreground="#000000")
        self.tgWelLightCancelIgn3.configure(highlightbackground="#d9d9d9")
        self.tgWelLightCancelIgn3.configure(highlightcolor="black")
        self.tgWelLightCancelIgn3.configure(indicatoron="0")
        self.tgWelLightCancelIgn3.configure(justify='left')
        self.tgWelLightCancelIgn3.configure(selectcolor="#d9d9d9")
        self.tgWelLightCancelIgn3.configure(text='''Ign 3''')
        self.tgWelLightCancelIgn3.configure(variable=self.tgWelLightCancelIgn3_value)

        self.tgWelLightCancelKeyIn = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLightCancelKeyIn.place(x=290, y=70, height=24, width=45)
        self.tgWelLightCancelKeyIn.configure(activebackground="#d9d9d9")
        self.tgWelLightCancelKeyIn.configure(activeforeground="#000000")
        self.tgWelLightCancelKeyIn.configure(background="#d9d9d9")
        self.tgWelLightCancelKeyIn.configure(command=self.tgWelLightCancelKeyIn_click)
        self.tgWelLightCancelKeyIn.configure(disabledforeground="#a3a3a3")
        self.tgWelLightCancelKeyIn.configure(foreground="#000000")
        self.tgWelLightCancelKeyIn.configure(highlightbackground="#d9d9d9")
        self.tgWelLightCancelKeyIn.configure(highlightcolor="black")
        self.tgWelLightCancelKeyIn.configure(indicatoron="0")
        self.tgWelLightCancelKeyIn.configure(justify='left')
        self.tgWelLightCancelKeyIn.configure(selectcolor="#d9d9d9")
        self.tgWelLightCancelKeyIn.configure(text='''Key in''')
        self.tgWelLightCancelKeyIn.configure(variable=self.tgWelLightCancelKeyIn_value)

        self.tgWelLightCancelDoor = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLightCancelDoor.place(x=340, y=70, height=24, width=45)
        self.tgWelLightCancelDoor.configure(activebackground="#d9d9d9")
        self.tgWelLightCancelDoor.configure(activeforeground="#000000")
        self.tgWelLightCancelDoor.configure(background="#d9d9d9")
        self.tgWelLightCancelDoor.configure(command=self.tgWelLightCancelDoor_click)
        self.tgWelLightCancelDoor.configure(disabledforeground="#a3a3a3")
        self.tgWelLightCancelDoor.configure(foreground="#000000")
        self.tgWelLightCancelDoor.configure(highlightbackground="#d9d9d9")
        self.tgWelLightCancelDoor.configure(highlightcolor="black")
        self.tgWelLightCancelDoor.configure(indicatoron="0")
        self.tgWelLightCancelDoor.configure(justify='left')
        self.tgWelLightCancelDoor.configure(selectcolor="#d9d9d9")
        self.tgWelLightCancelDoor.configure(text='''Door''')
        self.tgWelLightCancelDoor.configure(variable=self.tgWelLightCancelDoor_value)

        self.tgWelLightCancelIgn1 = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgWelLightCancelIgn1.place(x=390, y=70, height=24, width=45)
        self.tgWelLightCancelIgn1.configure(activebackground="#d9d9d9")
        self.tgWelLightCancelIgn1.configure(activeforeground="#000000")
        self.tgWelLightCancelIgn1.configure(background="#d9d9d9")
        self.tgWelLightCancelIgn1.configure(command=self.tgWelLightCancelIgn1_click)
        self.tgWelLightCancelIgn1.configure(disabledforeground="#a3a3a3")
        self.tgWelLightCancelIgn1.configure(foreground="#000000")
        self.tgWelLightCancelIgn1.configure(highlightbackground="#d9d9d9")
        self.tgWelLightCancelIgn1.configure(highlightcolor="black")
        self.tgWelLightCancelIgn1.configure(indicatoron="0")
        self.tgWelLightCancelIgn1.configure(justify='left')
        self.tgWelLightCancelIgn1.configure(selectcolor="#d9d9d9")
        self.tgWelLightCancelIgn1.configure(text='''Ign 1''')
        self.tgWelLightCancelIgn1.configure(variable=self.tgWelLightCancelIgn1_value)

        self.spnSenVal = tk.Spinbox(self.tabWelcomeLeaving, from_=25.0, to=65.0)
        self.spnSenVal.place(x=120, y=130, height=24, width=45)
        self.spnSenVal.configure(activebackground="#f9f9f9")
        self.spnSenVal.configure(background="white")
        self.spnSenVal.configure(borderwidth="2")
        self.spnSenVal.configure(buttonbackground="#d9d9d9")
        self.spnSenVal.configure(command=self.spnSenVal_click)
        self.spnSenVal.configure(disabledforeground="#a3a3a3")
        self.spnSenVal.configure(font="TkDefaultFont")
        self.spnSenVal.configure(foreground="black")
        self.spnSenVal.configure(highlightbackground="black")
        self.spnSenVal.configure(highlightcolor="black")
        self.spnSenVal.configure(increment="5.0")
        self.spnSenVal.configure(insertbackground="black")
        self.spnSenVal.configure(justify='right')
        self.spnSenVal.configure(selectbackground="blue")
        self.spnSenVal.configure(selectforeground="white")
        self.spnSenVal.configure(validate="all")

        self.tgLightParkFront = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightParkFront.place(x=120, y=160, height=24, width=40)
        self.tgLightParkFront.configure(activebackground="#d9d9d9")
        self.tgLightParkFront.configure(activeforeground="#000000")
        self.tgLightParkFront.configure(background="#d9d9d9")
        self.tgLightParkFront.configure(command=self.tgLightParkFront_click)
        self.tgLightParkFront.configure(disabledforeground="#a3a3a3")
        self.tgLightParkFront.configure(foreground="#000000")
        self.tgLightParkFront.configure(highlightbackground="#d9d9d9")
        self.tgLightParkFront.configure(highlightcolor="black")
        self.tgLightParkFront.configure(indicatoron="0")
        self.tgLightParkFront.configure(justify='left')
        self.tgLightParkFront.configure(selectcolor="#d9d9d9")
        self.tgLightParkFront.configure(text='''Front''')
        self.tgLightParkFront.configure(variable=self.tgLightParkFront_value)

        self.tgLightParkBack = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightParkBack.place(x=165, y=160, height=24, width=40)
        self.tgLightParkBack.configure(activebackground="#d9d9d9")
        self.tgLightParkBack.configure(activeforeground="#000000")
        self.tgLightParkBack.configure(background="#d9d9d9")
        self.tgLightParkBack.configure(command=self.tgLightParkBack_click)
        self.tgLightParkBack.configure(disabledforeground="#a3a3a3")
        self.tgLightParkBack.configure(foreground="#000000")
        self.tgLightParkBack.configure(highlightbackground="#d9d9d9")
        self.tgLightParkBack.configure(highlightcolor="black")
        self.tgLightParkBack.configure(indicatoron="0")
        self.tgLightParkBack.configure(justify='left')
        self.tgLightParkBack.configure(selectcolor="#d9d9d9")
        self.tgLightParkBack.configure(text='''Back''')
        self.tgLightParkBack.configure(variable=self.tgLightParkBack_value)

        self.tgLightParkBackInside = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightParkBackInside.place(x=210, y=160, height=24, width=75)
        self.tgLightParkBackInside.configure(activebackground="#d9d9d9")
        self.tgLightParkBackInside.configure(activeforeground="#000000")
        self.tgLightParkBackInside.configure(background="#d9d9d9")
        self.tgLightParkBackInside.configure(command=self.tgLightParkBackInside_click)
        self.tgLightParkBackInside.configure(disabledforeground="#a3a3a3")
        self.tgLightParkBackInside.configure(foreground="#000000")
        self.tgLightParkBackInside.configure(highlightbackground="#d9d9d9")
        self.tgLightParkBackInside.configure(highlightcolor="black")
        self.tgLightParkBackInside.configure(indicatoron="0")
        self.tgLightParkBackInside.configure(justify='left')
        self.tgLightParkBackInside.configure(selectcolor="#d9d9d9")
        self.tgLightParkBackInside.configure(text='''Back Indside''')
        self.tgLightParkBackInside.configure(variable=self.tgLightParkBackInside_value)

        self.tgLightBeamLow = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightBeamLow.place(x=120, y=190, height=24, width=40)
        self.tgLightBeamLow.configure(activebackground="#d9d9d9")
        self.tgLightBeamLow.configure(activeforeground="#000000")
        self.tgLightBeamLow.configure(background="#d9d9d9")
        self.tgLightBeamLow.configure(command=self.tgLightBeamLow_click)
        self.tgLightBeamLow.configure(disabledforeground="#a3a3a3")
        self.tgLightBeamLow.configure(foreground="#000000")
        self.tgLightBeamLow.configure(highlightbackground="#d9d9d9")
        self.tgLightBeamLow.configure(highlightcolor="black")
        self.tgLightBeamLow.configure(indicatoron="0")
        self.tgLightBeamLow.configure(justify='left')
        self.tgLightBeamLow.configure(selectcolor="#d9d9d9")
        self.tgLightBeamLow.configure(text='''Low''')
        self.tgLightBeamLow.configure(variable=self.tgLightBeamLow_value)

        self.tgLightBeamHigh = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightBeamHigh.place(x=165, y=190, height=24, width=40)
        self.tgLightBeamHigh.configure(activebackground="#d9d9d9")
        self.tgLightBeamHigh.configure(activeforeground="#000000")
        self.tgLightBeamHigh.configure(background="#d9d9d9")
        self.tgLightBeamHigh.configure(command=self.tgLightBeamHigh_click)
        self.tgLightBeamHigh.configure(disabledforeground="#a3a3a3")
        self.tgLightBeamHigh.configure(foreground="#000000")
        self.tgLightBeamHigh.configure(highlightbackground="#d9d9d9")
        self.tgLightBeamHigh.configure(highlightcolor="black")
        self.tgLightBeamHigh.configure(indicatoron="0")
        self.tgLightBeamHigh.configure(justify='left')
        self.tgLightBeamHigh.configure(selectcolor="#d9d9d9")
        self.tgLightBeamHigh.configure(text='''High''')
        self.tgLightBeamHigh.configure(variable=self.tgLightBeamHigh_value)

        self.tgLightTurnFront = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightTurnFront.place(x=120, y=220, height=24, width=40)
        self.tgLightTurnFront.configure(activebackground="#d9d9d9")
        self.tgLightTurnFront.configure(activeforeground="#000000")
        self.tgLightTurnFront.configure(background="#d9d9d9")
        self.tgLightTurnFront.configure(command=self.tgLightTurnFront_click)
        self.tgLightTurnFront.configure(disabledforeground="#a3a3a3")
        self.tgLightTurnFront.configure(foreground="#000000")
        self.tgLightTurnFront.configure(highlightbackground="#d9d9d9")
        self.tgLightTurnFront.configure(highlightcolor="black")
        self.tgLightTurnFront.configure(indicatoron="0")
        self.tgLightTurnFront.configure(justify='left')
        self.tgLightTurnFront.configure(selectcolor="#d9d9d9")
        self.tgLightTurnFront.configure(text='''Front''')
        self.tgLightTurnFront.configure(variable=self.tgLightTurnFront_value)

        self.tgLightTurnBack = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightTurnBack.place(x=165, y=220, height=24, width=40)
        self.tgLightTurnBack.configure(activebackground="#d9d9d9")
        self.tgLightTurnBack.configure(activeforeground="#000000")
        self.tgLightTurnBack.configure(background="#d9d9d9")
        self.tgLightTurnBack.configure(command=self.tgLightTurnBack_click)
        self.tgLightTurnBack.configure(disabledforeground="#a3a3a3")
        self.tgLightTurnBack.configure(foreground="#000000")
        self.tgLightTurnBack.configure(highlightbackground="#d9d9d9")
        self.tgLightTurnBack.configure(highlightcolor="black")
        self.tgLightTurnBack.configure(indicatoron="0")
        self.tgLightTurnBack.configure(justify='left')
        self.tgLightTurnBack.configure(selectcolor="#d9d9d9")
        self.tgLightTurnBack.configure(text='''Back''')
        self.tgLightTurnBack.configure(variable=self.tgLightTurnBack_value)

        self.tgLightTurnSide = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightTurnSide.place(x=210, y=220, height=24, width=40)
        self.tgLightTurnSide.configure(activebackground="#d9d9d9")
        self.tgLightTurnSide.configure(activeforeground="#000000")
        self.tgLightTurnSide.configure(background="#d9d9d9")
        self.tgLightTurnSide.configure(command=self.tgLightTurnSide_click)
        self.tgLightTurnSide.configure(disabledforeground="#a3a3a3")
        self.tgLightTurnSide.configure(foreground="#000000")
        self.tgLightTurnSide.configure(highlightbackground="#d9d9d9")
        self.tgLightTurnSide.configure(highlightcolor="black")
        self.tgLightTurnSide.configure(indicatoron="0")
        self.tgLightTurnSide.configure(justify='left')
        self.tgLightTurnSide.configure(selectcolor="#d9d9d9")
        self.tgLightTurnSide.configure(text='''Side''')
        self.tgLightTurnSide.configure(variable=self.tgLightTurnSide_value)

        self.tgLightOtherFogFront = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherFogFront.place(x=120, y=250, height=24, width=60)
        self.tgLightOtherFogFront.configure(activebackground="#d9d9d9")
        self.tgLightOtherFogFront.configure(activeforeground="#000000")
        self.tgLightOtherFogFront.configure(background="#d9d9d9")
        self.tgLightOtherFogFront.configure(command=self.tgLightOtherFogFront_click)
        self.tgLightOtherFogFront.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherFogFront.configure(foreground="#000000")
        self.tgLightOtherFogFront.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherFogFront.configure(highlightcolor="black")
        self.tgLightOtherFogFront.configure(indicatoron="0")
        self.tgLightOtherFogFront.configure(justify='left')
        self.tgLightOtherFogFront.configure(selectcolor="#d9d9d9")
        self.tgLightOtherFogFront.configure(text='''Fog Front''')
        self.tgLightOtherFogFront.configure(variable=self.tgLightOtherFogFront_value)

        self.tgLightOtherLicence = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherLicence.place(x=185, y=250, height=24, width=50)
        self.tgLightOtherLicence.configure(activebackground="#d9d9d9")
        self.tgLightOtherLicence.configure(activeforeground="#000000")
        self.tgLightOtherLicence.configure(background="#d9d9d9")
        self.tgLightOtherLicence.configure(command=self.tgLightOtherLicence_click)
        self.tgLightOtherLicence.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherLicence.configure(foreground="#000000")
        self.tgLightOtherLicence.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherLicence.configure(highlightcolor="black")
        self.tgLightOtherLicence.configure(indicatoron="0")
        self.tgLightOtherLicence.configure(justify='left')
        self.tgLightOtherLicence.configure(selectcolor="#d9d9d9")
        self.tgLightOtherLicence.configure(text='''Licence''')
        self.tgLightOtherLicence.configure(variable=self.tgLightOtherLicence_value)

        self.tgLightOtherReverse = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherReverse.place(x=240, y=250, height=24, width=50)
        self.tgLightOtherReverse.configure(activebackground="#d9d9d9")
        self.tgLightOtherReverse.configure(activeforeground="#000000")
        self.tgLightOtherReverse.configure(background="#d9d9d9")
        self.tgLightOtherReverse.configure(command=self.tgLightOtherReverse_click)
        self.tgLightOtherReverse.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherReverse.configure(foreground="#000000")
        self.tgLightOtherReverse.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherReverse.configure(highlightcolor="black")
        self.tgLightOtherReverse.configure(indicatoron="0")
        self.tgLightOtherReverse.configure(justify='left')
        self.tgLightOtherReverse.configure(selectcolor="#d9d9d9")
        self.tgLightOtherReverse.configure(text='''Reverse''')
        self.tgLightOtherReverse.configure(variable=self.tgLightOtherReverse_value)

        self.tgLightOtherBrake = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherBrake.place(x=295, y=250, height=24, width=40)
        self.tgLightOtherBrake.configure(activebackground="#d9d9d9")
        self.tgLightOtherBrake.configure(activeforeground="#000000")
        self.tgLightOtherBrake.configure(background="#d9d9d9")
        self.tgLightOtherBrake.configure(command=self.tgLightOtherBrake_click)
        self.tgLightOtherBrake.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherBrake.configure(foreground="#000000")
        self.tgLightOtherBrake.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherBrake.configure(highlightcolor="black")
        self.tgLightOtherBrake.configure(indicatoron="0")
        self.tgLightOtherBrake.configure(justify='left')
        self.tgLightOtherBrake.configure(selectcolor="#d9d9d9")
        self.tgLightOtherBrake.configure(text='''Brake''')
        self.tgLightOtherBrake.configure(variable=self.tgLightOtherBrake_value)

        self.tgLightOtherAmbient = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherAmbient.place(x=340, y=250, height=24, width=55)
        self.tgLightOtherAmbient.configure(activebackground="#d9d9d9")
        self.tgLightOtherAmbient.configure(activeforeground="#000000")
        self.tgLightOtherAmbient.configure(background="#d9d9d9")
        self.tgLightOtherAmbient.configure(command=self.tgLightOtherAmbient_click)
        self.tgLightOtherAmbient.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherAmbient.configure(foreground="#000000")
        self.tgLightOtherAmbient.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherAmbient.configure(highlightcolor="black")
        self.tgLightOtherAmbient.configure(indicatoron="0")
        self.tgLightOtherAmbient.configure(justify='left')
        self.tgLightOtherAmbient.configure(selectcolor="#d9d9d9")
        self.tgLightOtherAmbient.configure(text='''Ambient''')
        self.tgLightOtherAmbient.configure(variable=self.tgLightOtherAmbient_value)

        self.tgLightOtherFogBack = tk.Checkbutton(self.tabWelcomeLeaving)
        self.tgLightOtherFogBack.place(x=400, y=250, height=24, width=60)
        self.tgLightOtherFogBack.configure(activebackground="#d9d9d9")
        self.tgLightOtherFogBack.configure(activeforeground="#000000")
        self.tgLightOtherFogBack.configure(background="#d9d9d9")
        self.tgLightOtherFogBack.configure(command=self.tgLightOtherFogBack_click)
        self.tgLightOtherFogBack.configure(disabledforeground="#a3a3a3")
        self.tgLightOtherFogBack.configure(foreground="#000000")
        self.tgLightOtherFogBack.configure(highlightbackground="#d9d9d9")
        self.tgLightOtherFogBack.configure(highlightcolor="black")
        self.tgLightOtherFogBack.configure(indicatoron="0")
        self.tgLightOtherFogBack.configure(justify='left')
        self.tgLightOtherFogBack.configure(selectcolor="#d9d9d9")
        self.tgLightOtherFogBack.configure(text='''Fog Back''')
        self.tgLightOtherFogBack.configure(variable=self.tgLightOtherFogBack_value)

        self.btnWelMsg = tk.Button(self.tabWelcomeLeaving)
        self.btnWelMsg.place(x=510, y=10, height=24, width=25)
        self.btnWelMsg.configure(activebackground="#ececec")
        self.btnWelMsg.configure(activeforeground="#000000")
        self.btnWelMsg.configure(background="#d9d9d9")
        self.btnWelMsg.configure(command=self.btnWelMsg_click)
        self.btnWelMsg.configure(disabledforeground="#a3a3a3")
        self.btnWelMsg.configure(font="-family {Tahoma} -size 8")
        self.btnWelMsg.configure(foreground="#000000")
        self.btnWelMsg.configure(highlightbackground="#d9d9d9")
        self.btnWelMsg.configure(highlightcolor="black")
        self.btnWelMsg.configure(pady="0")
        self.btnWelMsg.configure(text='''|>''')

        self.btnWelMsgTxt = tk.Button(self.tabWelcomeLeaving)
        self.btnWelMsgTxt.place(x=510, y=40, height=24, width=25)
        self.btnWelMsgTxt.configure(activebackground="#ececec")
        self.btnWelMsgTxt.configure(activeforeground="#000000")
        self.btnWelMsgTxt.configure(background="#d9d9d9")
        self.btnWelMsgTxt.configure(command=self.btnWelMsgTxt_click)
        self.btnWelMsgTxt.configure(disabledforeground="#a3a3a3")
        self.btnWelMsgTxt.configure(font="-family {Tahoma} -size 8")
        self.btnWelMsgTxt.configure(foreground="#000000")
        self.btnWelMsgTxt.configure(highlightbackground="#d9d9d9")
        self.btnWelMsgTxt.configure(highlightcolor="black")
        self.btnWelMsgTxt.configure(pady="0")
        self.btnWelMsgTxt.configure(text='''|>''')

        self.btnWelLight = tk.Button(self.tabWelcomeLeaving)
        self.btnWelLight.place(x=510, y=70, height=24, width=25)
        self.btnWelLight.configure(activebackground="#ececec")
        self.btnWelLight.configure(activeforeground="#000000")
        self.btnWelLight.configure(background="#d9d9d9")
        self.btnWelLight.configure(command=self.btnWelLight_click)
        self.btnWelLight.configure(disabledforeground="#a3a3a3")
        self.btnWelLight.configure(font="-family {Tahoma} -size 8")
        self.btnWelLight.configure(foreground="#000000")
        self.btnWelLight.configure(highlightbackground="#d9d9d9")
        self.btnWelLight.configure(highlightcolor="black")
        self.btnWelLight.configure(pady="0")
        self.btnWelLight.configure(text='''|>''')

        self.btnLevLight = tk.Button(self.tabWelcomeLeaving)
        self.btnLevLight.place(x=510, y=100, height=24, width=25)
        self.btnLevLight.configure(activebackground="#ececec")
        self.btnLevLight.configure(activeforeground="#000000")
        self.btnLevLight.configure(background="#d9d9d9")
        self.btnLevLight.configure(command=self.btnLevLight_click)
        self.btnLevLight.configure(disabledforeground="#a3a3a3")
        self.btnLevLight.configure(font="-family {Tahoma} -size 8")
        self.btnLevLight.configure(foreground="#000000")
        self.btnLevLight.configure(highlightbackground="#d9d9d9")
        self.btnLevLight.configure(highlightcolor="black")
        self.btnLevLight.configure(pady="0")
        self.btnLevLight.configure(text='''|>''')

        self.btnSenVal = tk.Button(self.tabWelcomeLeaving)
        self.btnSenVal.place(x=510, y=130, height=24, width=25)
        self.btnSenVal.configure(activebackground="#ececec")
        self.btnSenVal.configure(activeforeground="#000000")
        self.btnSenVal.configure(background="#d9d9d9")
        self.btnSenVal.configure(command=self.btnSenVal_click)
        self.btnSenVal.configure(disabledforeground="#a3a3a3")
        self.btnSenVal.configure(font="-family {Tahoma} -size 8")
        self.btnSenVal.configure(foreground="#000000")
        self.btnSenVal.configure(highlightbackground="#d9d9d9")
        self.btnSenVal.configure(highlightcolor="black")
        self.btnSenVal.configure(pady="0")
        self.btnSenVal.configure(text='''|>''')

        self.btnLightPark = tk.Button(self.tabWelcomeLeaving)
        self.btnLightPark.place(x=510, y=160, height=24, width=25)
        self.btnLightPark.configure(activebackground="#ececec")
        self.btnLightPark.configure(activeforeground="#000000")
        self.btnLightPark.configure(background="#d9d9d9")
        self.btnLightPark.configure(command=self.btnLightPark_click)
        self.btnLightPark.configure(disabledforeground="#a3a3a3")
        self.btnLightPark.configure(font="-family {Tahoma} -size 8")
        self.btnLightPark.configure(foreground="#000000")
        self.btnLightPark.configure(highlightbackground="#d9d9d9")
        self.btnLightPark.configure(highlightcolor="black")
        self.btnLightPark.configure(pady="0")
        self.btnLightPark.configure(text='''|>''')

        self.btnLightBeam = tk.Button(self.tabWelcomeLeaving)
        self.btnLightBeam.place(x=510, y=190, height=24, width=25)
        self.btnLightBeam.configure(activebackground="#ececec")
        self.btnLightBeam.configure(activeforeground="#000000")
        self.btnLightBeam.configure(background="#d9d9d9")
        self.btnLightBeam.configure(command=self.btnLightBeam_click)
        self.btnLightBeam.configure(disabledforeground="#a3a3a3")
        self.btnLightBeam.configure(font="-family {Tahoma} -size 8")
        self.btnLightBeam.configure(foreground="#000000")
        self.btnLightBeam.configure(highlightbackground="#d9d9d9")
        self.btnLightBeam.configure(highlightcolor="black")
        self.btnLightBeam.configure(pady="0")
        self.btnLightBeam.configure(text='''|>''')

        self.btnLightTurn = tk.Button(self.tabWelcomeLeaving)
        self.btnLightTurn.place(x=510, y=220, height=24, width=25)
        self.btnLightTurn.configure(activebackground="#ececec")
        self.btnLightTurn.configure(activeforeground="#000000")
        self.btnLightTurn.configure(background="#d9d9d9")
        self.btnLightTurn.configure(command=self.btnLightTurn_click)
        self.btnLightTurn.configure(disabledforeground="#a3a3a3")
        self.btnLightTurn.configure(font="-family {Tahoma} -size 8")
        self.btnLightTurn.configure(foreground="#000000")
        self.btnLightTurn.configure(highlightbackground="#d9d9d9")
        self.btnLightTurn.configure(highlightcolor="black")
        self.btnLightTurn.configure(pady="0")
        self.btnLightTurn.configure(text='''|>''')

        self.btnLightOther = tk.Button(self.tabWelcomeLeaving)
        self.btnLightOther.place(x=510, y=250, height=24, width=25)
        self.btnLightOther.configure(activebackground="#ececec")
        self.btnLightOther.configure(activeforeground="#000000")
        self.btnLightOther.configure(background="#d9d9d9")
        self.btnLightOther.configure(command=self.btnLightOther_click)
        self.btnLightOther.configure(disabledforeground="#a3a3a3")
        self.btnLightOther.configure(font="-family {Tahoma} -size 8")
        self.btnLightOther.configure(foreground="#000000")
        self.btnLightOther.configure(highlightbackground="#d9d9d9")
        self.btnLightOther.configure(highlightcolor="black")
        self.btnLightOther.configure(pady="0")
        self.btnLightOther.configure(text='''|>''')

        self.btnMirFold = tk.Button(self.tabWelcomeLeaving)
        self.btnMirFold.place(x=510, y=280, height=24, width=25)
        self.btnMirFold.configure(activebackground="#ececec")
        self.btnMirFold.configure(activeforeground="#000000")
        self.btnMirFold.configure(background="#d9d9d9")
        self.btnMirFold.configure(command=self.btnMirFold_click)
        self.btnMirFold.configure(disabledforeground="#a3a3a3")
        self.btnMirFold.configure(font="-family {Tahoma} -size 8")
        self.btnMirFold.configure(foreground="#000000")
        self.btnMirFold.configure(highlightbackground="#d9d9d9")
        self.btnMirFold.configure(highlightcolor="black")
        self.btnMirFold.configure(pady="0")
        self.btnMirFold.configure(text='''|>''')

        self.Label1_2_13 = tk.Label(self.tabCentralLock)
        self.Label1_2_13.place(x=40, y=10, height=24, width=75)
        self.Label1_2_13.configure(activebackground="#f9f9f9")
        self.Label1_2_13.configure(activeforeground="black")
        self.Label1_2_13.configure(background="#d9d9d9")
        self.Label1_2_13.configure(disabledforeground="#a3a3a3")
        self.Label1_2_13.configure(foreground="#000000")
        self.Label1_2_13.configure(highlightbackground="#d9d9d9")
        self.Label1_2_13.configure(highlightcolor="black")
        self.Label1_2_13.configure(relief="groove")
        self.Label1_2_13.configure(text='''LOCK SPEED''')

        self.tgLockSpeed = tk.Checkbutton(self.tabCentralLock)
        self.tgLockSpeed.place(x=10, y=10, height=24, width=25)
        self.tgLockSpeed.configure(activebackground="#d9d9d9")
        self.tgLockSpeed.configure(activeforeground="#000000")
        self.tgLockSpeed.configure(background="#d9d9d9")
        self.tgLockSpeed.configure(command=self.tgLockSpeed_click)
        self.tgLockSpeed.configure(disabledforeground="#a3a3a3")
        self.tgLockSpeed.configure(foreground="#000000")
        self.tgLockSpeed.configure(highlightbackground="#d9d9d9")
        self.tgLockSpeed.configure(highlightcolor="black")
        self.tgLockSpeed.configure(indicatoron="0")
        self.tgLockSpeed.configure(justify='left')
        self.tgLockSpeed.configure(selectcolor="#d9d9d9")
        self.tgLockSpeed.configure(variable=self.tgLockSpeed_value)

        self.tgRelock = tk.Checkbutton(self.tabCentralLock)
        self.tgRelock.place(x=10, y=70, height=24, width=25)
        self.tgRelock.configure(activebackground="#d9d9d9")
        self.tgRelock.configure(activeforeground="#000000")
        self.tgRelock.configure(background="#d9d9d9")
        self.tgRelock.configure(command=self.tgRelock_click)
        self.tgRelock.configure(disabledforeground="#a3a3a3")
        self.tgRelock.configure(foreground="#000000")
        self.tgRelock.configure(highlightbackground="#d9d9d9")
        self.tgRelock.configure(highlightcolor="black")
        self.tgRelock.configure(indicatoron="0")
        self.tgRelock.configure(justify='left')
        self.tgRelock.configure(selectcolor="#d9d9d9")
        self.tgRelock.configure(variable=self.tgRelock_value)

        self.Label1_2_13_1 = tk.Label(self.tabCentralLock)
        self.Label1_2_13_1.place(x=40, y=40, height=24, width=75)
        self.Label1_2_13_1.configure(activebackground="#f9f9f9")
        self.Label1_2_13_1.configure(activeforeground="black")
        self.Label1_2_13_1.configure(background="#d9d9d9")
        self.Label1_2_13_1.configure(disabledforeground="#a3a3a3")
        self.Label1_2_13_1.configure(foreground="#000000")
        self.Label1_2_13_1.configure(highlightbackground="#d9d9d9")
        self.Label1_2_13_1.configure(highlightcolor="black")
        self.Label1_2_13_1.configure(relief="groove")
        self.Label1_2_13_1.configure(text='''UNLOCK''')

        self.Label1_2_13_2 = tk.Label(self.tabCentralLock)
        self.Label1_2_13_2.place(x=40, y=70, height=24, width=75)
        self.Label1_2_13_2.configure(activebackground="#f9f9f9")
        self.Label1_2_13_2.configure(activeforeground="black")
        self.Label1_2_13_2.configure(background="#d9d9d9")
        self.Label1_2_13_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2_13_2.configure(foreground="#000000")
        self.Label1_2_13_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2_13_2.configure(highlightcolor="black")
        self.Label1_2_13_2.configure(relief="groove")
        self.Label1_2_13_2.configure(text='''RELOCK''')

        self.spnLockSpeed = tk.Spinbox(self.tabCentralLock, from_=1.0, to=30.0)
        self.spnLockSpeed.place(x=120, y=10, height=24, width=45)
        self.spnLockSpeed.configure(activebackground="#f9f9f9")
        self.spnLockSpeed.configure(background="white")
        self.spnLockSpeed.configure(borderwidth="2")
        self.spnLockSpeed.configure(buttonbackground="#d9d9d9")
        self.spnLockSpeed.configure(disabledforeground="#a3a3a3")
        self.spnLockSpeed.configure(font="TkDefaultFont")
        self.spnLockSpeed.configure(foreground="black")
        self.spnLockSpeed.configure(highlightbackground="black")
        self.spnLockSpeed.configure(highlightcolor="black")
        self.spnLockSpeed.configure(insertbackground="black")
        self.spnLockSpeed.configure(justify='right')
        self.spnLockSpeed.configure(selectbackground="blue")
        self.spnLockSpeed.configure(selectforeground="white")

        self.Label2_3 = tk.Label(self.tabCentralLock)
        self.Label2_3.place(x=165, y=10, height=24, width=35)
        self.Label2_3.configure(activebackground="#f9f9f9")
        self.Label2_3.configure(activeforeground="black")
        self.Label2_3.configure(background="#d9d9d9")
        self.Label2_3.configure(disabledforeground="#a3a3a3")
        self.Label2_3.configure(foreground="#000000")
        self.Label2_3.configure(highlightbackground="#d9d9d9")
        self.Label2_3.configure(highlightcolor="black")
        self.Label2_3.configure(text='''km/h''')

        self.tgUnlockDoor = tk.Checkbutton(self.tabCentralLock)
        self.tgUnlockDoor.place(x=120, y=40, height=24, width=45)
        self.tgUnlockDoor.configure(activebackground="#d9d9d9")
        self.tgUnlockDoor.configure(activeforeground="#000000")
        self.tgUnlockDoor.configure(background="#d9d9d9")
        self.tgUnlockDoor.configure(command=self.tgUnlockDoor_click)
        self.tgUnlockDoor.configure(disabledforeground="#a3a3a3")
        self.tgUnlockDoor.configure(foreground="#000000")
        self.tgUnlockDoor.configure(highlightbackground="#d9d9d9")
        self.tgUnlockDoor.configure(highlightcolor="black")
        self.tgUnlockDoor.configure(indicatoron="0")
        self.tgUnlockDoor.configure(justify='left')
        self.tgUnlockDoor.configure(selectcolor="#d9d9d9")
        self.tgUnlockDoor.configure(text='''Door''')
        self.tgUnlockDoor.configure(variable=self.tgUnlockDoor_value)

        self.tgUnlockBrake = tk.Checkbutton(self.tabCentralLock)
        self.tgUnlockBrake.place(x=170, y=40, height=24, width=45)
        self.tgUnlockBrake.configure(activebackground="#d9d9d9")
        self.tgUnlockBrake.configure(activeforeground="#000000")
        self.tgUnlockBrake.configure(background="#d9d9d9")
        self.tgUnlockBrake.configure(command=self.tgUnlockBrake_click)
        self.tgUnlockBrake.configure(disabledforeground="#a3a3a3")
        self.tgUnlockBrake.configure(foreground="#000000")
        self.tgUnlockBrake.configure(highlightbackground="#d9d9d9")
        self.tgUnlockBrake.configure(highlightcolor="black")
        self.tgUnlockBrake.configure(indicatoron="0")
        self.tgUnlockBrake.configure(justify='left')
        self.tgUnlockBrake.configure(selectcolor="#d9d9d9")
        self.tgUnlockBrake.configure(text='''Brake''')
        self.tgUnlockBrake.configure(variable=self.tgUnlockBrake_value)

        self.tgUnlockGearP = tk.Checkbutton(self.tabCentralLock)
        self.tgUnlockGearP.place(x=220, y=40, height=24, width=45)
        self.tgUnlockGearP.configure(activebackground="#d9d9d9")
        self.tgUnlockGearP.configure(activeforeground="#000000")
        self.tgUnlockGearP.configure(background="#d9d9d9")
        self.tgUnlockGearP.configure(command=self.tgUnlockGearP_click)
        self.tgUnlockGearP.configure(disabledforeground="#a3a3a3")
        self.tgUnlockGearP.configure(foreground="#000000")
        self.tgUnlockGearP.configure(highlightbackground="#d9d9d9")
        self.tgUnlockGearP.configure(highlightcolor="black")
        self.tgUnlockGearP.configure(indicatoron="0")
        self.tgUnlockGearP.configure(justify='left')
        self.tgUnlockGearP.configure(selectcolor="#d9d9d9")
        self.tgUnlockGearP.configure(text='''Gear P''')
        self.tgUnlockGearP.configure(variable=self.tgUnlockGearP_value)

        self.tgUnlockIgn1 = tk.Checkbutton(self.tabCentralLock)
        self.tgUnlockIgn1.place(x=270, y=40, height=24, width=45)
        self.tgUnlockIgn1.configure(activebackground="#d9d9d9")
        self.tgUnlockIgn1.configure(activeforeground="#000000")
        self.tgUnlockIgn1.configure(background="#d9d9d9")
        self.tgUnlockIgn1.configure(command=self.tgUnlockIgn1_click)
        self.tgUnlockIgn1.configure(disabledforeground="#a3a3a3")
        self.tgUnlockIgn1.configure(foreground="#000000")
        self.tgUnlockIgn1.configure(highlightbackground="#d9d9d9")
        self.tgUnlockIgn1.configure(highlightcolor="black")
        self.tgUnlockIgn1.configure(indicatoron="0")
        self.tgUnlockIgn1.configure(justify='left')
        self.tgUnlockIgn1.configure(selectcolor="#d9d9d9")
        self.tgUnlockIgn1.configure(text='''Ign2>1''')
        self.tgUnlockIgn1.configure(variable=self.tgUnlockIgn1_value)

        self.spnRelockTime = tk.Spinbox(self.tabCentralLock, from_=1.0, to=30.0)
        self.spnRelockTime.place(x=120, y=70, height=24, width=45)
        self.spnRelockTime.configure(activebackground="#f9f9f9")
        self.spnRelockTime.configure(background="white")
        self.spnRelockTime.configure(borderwidth="2")
        self.spnRelockTime.configure(buttonbackground="#d9d9d9")
        self.spnRelockTime.configure(disabledforeground="#a3a3a3")
        self.spnRelockTime.configure(font="TkDefaultFont")
        self.spnRelockTime.configure(foreground="black")
        self.spnRelockTime.configure(highlightbackground="black")
        self.spnRelockTime.configure(highlightcolor="black")
        self.spnRelockTime.configure(insertbackground="black")
        self.spnRelockTime.configure(justify='right')
        self.spnRelockTime.configure(selectbackground="blue")
        self.spnRelockTime.configure(selectforeground="white")

        self.Label2_1_3_1_1 = tk.Label(self.tabCentralLock)
        self.Label2_1_3_1_1.place(x=165, y=70, height=24, width=25)
        self.Label2_1_3_1_1.configure(activebackground="#f9f9f9")
        self.Label2_1_3_1_1.configure(activeforeground="black")
        self.Label2_1_3_1_1.configure(background="#d9d9d9")
        self.Label2_1_3_1_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1_3_1_1.configure(foreground="#000000")
        self.Label2_1_3_1_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1_3_1_1.configure(highlightcolor="black")
        self.Label2_1_3_1_1.configure(text='''min''')

        self.btnLockSpeed = tk.Button(self.tabCentralLock)
        self.btnLockSpeed.place(x=510, y=10, height=24, width=25)
        self.btnLockSpeed.configure(activebackground="#ececec")
        self.btnLockSpeed.configure(activeforeground="#000000")
        self.btnLockSpeed.configure(background="#d9d9d9")
        self.btnLockSpeed.configure(command=self.btnLockSpeed_click)
        self.btnLockSpeed.configure(disabledforeground="#a3a3a3")
        self.btnLockSpeed.configure(font="-family {Tahoma} -size 8")
        self.btnLockSpeed.configure(foreground="#000000")
        self.btnLockSpeed.configure(highlightbackground="#d9d9d9")
        self.btnLockSpeed.configure(highlightcolor="black")
        self.btnLockSpeed.configure(pady="0")
        self.btnLockSpeed.configure(text='''|>''')

        self.btnUnlock = tk.Button(self.tabCentralLock)
        self.btnUnlock.place(x=510, y=40, height=24, width=25)
        self.btnUnlock.configure(activebackground="#ececec")
        self.btnUnlock.configure(activeforeground="#000000")
        self.btnUnlock.configure(background="#d9d9d9")
        self.btnUnlock.configure(command=self.btnUnlock_click)
        self.btnUnlock.configure(disabledforeground="#a3a3a3")
        self.btnUnlock.configure(font="-family {Tahoma} -size 8")
        self.btnUnlock.configure(foreground="#000000")
        self.btnUnlock.configure(highlightbackground="#d9d9d9")
        self.btnUnlock.configure(highlightcolor="black")
        self.btnUnlock.configure(pady="0")
        self.btnUnlock.configure(text='''|>''')

        self.btnRelock = tk.Button(self.tabCentralLock)
        self.btnRelock.place(x=510, y=70, height=24, width=25)
        self.btnRelock.configure(activebackground="#ececec")
        self.btnRelock.configure(activeforeground="#000000")
        self.btnRelock.configure(background="#d9d9d9")
        self.btnRelock.configure(command=self.btnRelock_click)
        self.btnRelock.configure(disabledforeground="#a3a3a3")
        self.btnRelock.configure(font="-family {Tahoma} -size 8")
        self.btnRelock.configure(foreground="#000000")
        self.btnRelock.configure(highlightbackground="#d9d9d9")
        self.btnRelock.configure(highlightcolor="black")
        self.btnRelock.configure(pady="0")
        self.btnRelock.configure(text='''|>''')

        self.btnPing = tk.Button(self.tabCommands)
        self.btnPing.place(x=10, y=10, height=24, width=50)
        self.btnPing.configure(activebackground="#ececec")
        self.btnPing.configure(activeforeground="#000000")
        self.btnPing.configure(background="#d9d9d9")
        self.btnPing.configure(command=self.btnPing_click)
        self.btnPing.configure(disabledforeground="#a3a3a3")
        self.btnPing.configure(foreground="#000000")
        self.btnPing.configure(highlightbackground="#d9d9d9")
        self.btnPing.configure(highlightcolor="black")
        self.btnPing.configure(pady="0")
        self.btnPing.configure(text='''PING''')

        self.btnReset = tk.Button(self.tabCommands)
        self.btnReset.place(x=65, y=10, height=24, width=50)
        self.btnReset.configure(activebackground="#ececec")
        self.btnReset.configure(activeforeground="#000000")
        self.btnReset.configure(background="#d9d9d9")
        self.btnReset.configure(command=self.btnReset_click)
        self.btnReset.configure(disabledforeground="#a3a3a3")
        self.btnReset.configure(foreground="#000000")
        self.btnReset.configure(highlightbackground="#d9d9d9")
        self.btnReset.configure(highlightcolor="black")
        self.btnReset.configure(pady="0")
        self.btnReset.configure(text='''Reset''')

        self.btnDiag = tk.Button(self.tabCommands)
        self.btnDiag.place(x=10, y=40, height=24, width=50)
        self.btnDiag.configure(activebackground="#ececec")
        self.btnDiag.configure(activeforeground="#000000")
        self.btnDiag.configure(background="#d9d9d9")
        self.btnDiag.configure(command=self.btnDiag_click)
        self.btnDiag.configure(disabledforeground="#a3a3a3")
        self.btnDiag.configure(foreground="#000000")
        self.btnDiag.configure(highlightbackground="#d9d9d9")
        self.btnDiag.configure(highlightcolor="black")
        self.btnDiag.configure(pady="0")
        self.btnDiag.configure(text='''DIAG''')

        self.btnDiag0 = tk.Button(self.tabCommands)
        self.btnDiag0.place(x=65, y=40, height=24, width=50)
        self.btnDiag0.configure(activebackground="#ececec")
        self.btnDiag0.configure(activeforeground="#000000")
        self.btnDiag0.configure(background="#d9d9d9")
        self.btnDiag0.configure(command=self.btnDiag0_click)
        self.btnDiag0.configure(disabledforeground="#a3a3a3")
        self.btnDiag0.configure(foreground="#000000")
        self.btnDiag0.configure(highlightbackground="#d9d9d9")
        self.btnDiag0.configure(highlightcolor="black")
        self.btnDiag0.configure(pady="0")
        self.btnDiag0.configure(text='''DIAG:0''')

        self.btnDiag1 = tk.Button(self.tabCommands)
        self.btnDiag1.place(x=115, y=40, height=24, width=50)
        self.btnDiag1.configure(activebackground="#ececec")
        self.btnDiag1.configure(activeforeground="#000000")
        self.btnDiag1.configure(background="#d9d9d9")
        self.btnDiag1.configure(command=self.btnDiag1_click)
        self.btnDiag1.configure(disabledforeground="#a3a3a3")
        self.btnDiag1.configure(foreground="#000000")
        self.btnDiag1.configure(highlightbackground="#d9d9d9")
        self.btnDiag1.configure(highlightcolor="black")
        self.btnDiag1.configure(pady="0")
        self.btnDiag1.configure(text='''DIAG:1''')

        self.btnDiag2 = tk.Button(self.tabCommands)
        self.btnDiag2.place(x=165, y=40, height=24, width=50)
        self.btnDiag2.configure(activebackground="#ececec")
        self.btnDiag2.configure(activeforeground="#000000")
        self.btnDiag2.configure(background="#d9d9d9")
        self.btnDiag2.configure(command=self.btnDiag2_click)
        self.btnDiag2.configure(disabledforeground="#a3a3a3")
        self.btnDiag2.configure(foreground="#000000")
        self.btnDiag2.configure(highlightbackground="#d9d9d9")
        self.btnDiag2.configure(highlightcolor="black")
        self.btnDiag2.configure(pady="0")
        self.btnDiag2.configure(text='''DIAG:2''')

        self.btnAV = tk.Button(self.tabCommands)
        self.btnAV.place(x=10, y=70, height=24, width=50)
        self.btnAV.configure(activebackground="#ececec")
        self.btnAV.configure(activeforeground="#000000")
        self.btnAV.configure(background="#d9d9d9")
        self.btnAV.configure(command=self.btnAV_click)
        self.btnAV.configure(disabledforeground="#a3a3a3")
        self.btnAV.configure(foreground="#000000")
        self.btnAV.configure(highlightbackground="#d9d9d9")
        self.btnAV.configure(highlightcolor="black")
        self.btnAV.configure(pady="0")
        self.btnAV.configure(text='''AV''')

        self.btnAV0 = tk.Button(self.tabCommands)
        self.btnAV0.place(x=65, y=70, height=24, width=50)
        self.btnAV0.configure(activebackground="#ececec")
        self.btnAV0.configure(activeforeground="#000000")
        self.btnAV0.configure(background="#d9d9d9")
        self.btnAV0.configure(command=self.btnAV0_click)
        self.btnAV0.configure(disabledforeground="#a3a3a3")
        self.btnAV0.configure(foreground="#000000")
        self.btnAV0.configure(highlightbackground="#d9d9d9")
        self.btnAV0.configure(highlightcolor="black")
        self.btnAV0.configure(pady="0")
        self.btnAV0.configure(text='''AV:0''')

        self.btnAV1 = tk.Button(self.tabCommands)
        self.btnAV1.place(x=115, y=70, height=24, width=50)
        self.btnAV1.configure(activebackground="#ececec")
        self.btnAV1.configure(activeforeground="#000000")
        self.btnAV1.configure(background="#d9d9d9")
        self.btnAV1.configure(command=self.btnAV1_click)
        self.btnAV1.configure(disabledforeground="#a3a3a3")
        self.btnAV1.configure(foreground="#000000")
        self.btnAV1.configure(highlightbackground="#d9d9d9")
        self.btnAV1.configure(highlightcolor="black")
        self.btnAV1.configure(pady="0")
        self.btnAV1.configure(text='''AV:1''')

        self.btnDownloadSettings = tk.Button(self.tabCommands)
        self.btnDownloadSettings.place(x=10, y=100, height=24, width=105)
        self.btnDownloadSettings.configure(activebackground="#ececec")
        self.btnDownloadSettings.configure(activeforeground="#000000")
        self.btnDownloadSettings.configure(background="#d9d9d9")
        self.btnDownloadSettings.configure(command=self.btnDownloadSettings_click)
        self.btnDownloadSettings.configure(disabledforeground="#a3a3a3")
        self.btnDownloadSettings.configure(foreground="#000000")
        self.btnDownloadSettings.configure(highlightbackground="#d9d9d9")
        self.btnDownloadSettings.configure(highlightcolor="black")
        self.btnDownloadSettings.configure(pady="0")
        self.btnDownloadSettings.configure(text='''Download Settings''')

        self.btnLight = tk.Button(self.tabCommands)
        self.btnLight.place(x=10, y=130, height=24, width=50)
        self.btnLight.configure(activebackground="#ececec")
        self.btnLight.configure(activeforeground="#000000")
        self.btnLight.configure(background="#d9d9d9")
        self.btnLight.configure(command=self.btnLight_click)
        self.btnLight.configure(disabledforeground="#a3a3a3")
        self.btnLight.configure(foreground="#000000")
        self.btnLight.configure(highlightbackground="#d9d9d9")
        self.btnLight.configure(highlightcolor="black")
        self.btnLight.configure(pady="0")
        self.btnLight.configure(text='''LIGHT''')

        self.btnCVMOpen = tk.Button(self.tabCommands)
        self.btnCVMOpen.place(x=10, y=160, height=24, width=75)
        self.btnCVMOpen.configure(activebackground="#ececec")
        self.btnCVMOpen.configure(activeforeground="#000000")
        self.btnCVMOpen.configure(background="#d9d9d9")
        self.btnCVMOpen.configure(command=self.btnCVMOpen_click)
        self.btnCVMOpen.configure(disabledforeground="#a3a3a3")
        self.btnCVMOpen.configure(foreground="#000000")
        self.btnCVMOpen.configure(highlightbackground="#d9d9d9")
        self.btnCVMOpen.configure(highlightcolor="black")
        self.btnCVMOpen.configure(pady="0")
        self.btnCVMOpen.configure(text='''CVM:OPEN''')

        self.btnCVMStop = tk.Button(self.tabCommands)
        self.btnCVMStop.place(x=90, y=160, height=24, width=75)
        self.btnCVMStop.configure(activebackground="#ececec")
        self.btnCVMStop.configure(activeforeground="#000000")
        self.btnCVMStop.configure(background="#d9d9d9")
        self.btnCVMStop.configure(command=self.btnCVMStop_click)
        self.btnCVMStop.configure(disabledforeground="#a3a3a3")
        self.btnCVMStop.configure(foreground="#000000")
        self.btnCVMStop.configure(highlightbackground="#d9d9d9")
        self.btnCVMStop.configure(highlightcolor="black")
        self.btnCVMStop.configure(pady="0")
        self.btnCVMStop.configure(text='''CVM:STOP''')

        self.btnCVMClose = tk.Button(self.tabCommands)
        self.btnCVMClose.place(x=170, y=160, height=24, width=75)
        self.btnCVMClose.configure(activebackground="#ececec")
        self.btnCVMClose.configure(activeforeground="#000000")
        self.btnCVMClose.configure(background="#d9d9d9")
        self.btnCVMClose.configure(command=self.btnCVMClose_click)
        self.btnCVMClose.configure(disabledforeground="#a3a3a3")
        self.btnCVMClose.configure(foreground="#000000")
        self.btnCVMClose.configure(highlightbackground="#d9d9d9")
        self.btnCVMClose.configure(highlightcolor="black")
        self.btnCVMClose.configure(pady="0")
        self.btnCVMClose.configure(text='''CVM:CLOSE''')

        self.btnShutdown = tk.Button(self.tabCommands)
        self.btnShutdown.place(x=10, y=190, height=24, width=75)
        self.btnShutdown.configure(activebackground="#ececec")
        self.btnShutdown.configure(activeforeground="#000000")
        self.btnShutdown.configure(background="#d9d9d9")
        self.btnShutdown.configure(command=self.btnShutdown_click)
        self.btnShutdown.configure(disabledforeground="#a3a3a3")
        self.btnShutdown.configure(foreground="#000000")
        self.btnShutdown.configure(highlightbackground="#d9d9d9")
        self.btnShutdown.configure(highlightcolor="black")
        self.btnShutdown.configure(pady="0")
        self.btnShutdown.configure(text='''SHUTDOWN''')

        self.btnUpdateOn = tk.Button(self.tabCommands)
        self.btnUpdateOn.place(x=10, y=220, height=24, width=75)
        self.btnUpdateOn.configure(activebackground="#ececec")
        self.btnUpdateOn.configure(activeforeground="#000000")
        self.btnUpdateOn.configure(background="#d9d9d9")
        self.btnUpdateOn.configure(command=self.btnUpdateOn_click)
        self.btnUpdateOn.configure(disabledforeground="#a3a3a3")
        self.btnUpdateOn.configure(foreground="#000000")
        self.btnUpdateOn.configure(highlightbackground="#d9d9d9")
        self.btnUpdateOn.configure(highlightcolor="black")
        self.btnUpdateOn.configure(pady="0")
        self.btnUpdateOn.configure(text='''Update:EN''')

        self.btnUpdateOff = tk.Button(self.tabCommands)
        self.btnUpdateOff.place(x=90, y=220, height=24, width=75)
        self.btnUpdateOff.configure(activebackground="#ececec")
        self.btnUpdateOff.configure(activeforeground="#000000")
        self.btnUpdateOff.configure(background="#d9d9d9")
        self.btnUpdateOff.configure(command=self.btnUpdateOff_click)
        self.btnUpdateOff.configure(disabledforeground="#a3a3a3")
        self.btnUpdateOff.configure(foreground="#000000")
        self.btnUpdateOff.configure(highlightbackground="#d9d9d9")
        self.btnUpdateOff.configure(highlightcolor="black")
        self.btnUpdateOff.configure(pady="0")
        self.btnUpdateOff.configure(text='''Update:QT''')

        self.btnResetSettings = tk.Button(self.tabCommands)
        self.btnResetSettings.place(x=230, y=100, height=24, width=105)
        self.btnResetSettings.configure(activebackground="#ececec")
        self.btnResetSettings.configure(activeforeground="#000000")
        self.btnResetSettings.configure(background="#d9d9d9")
        self.btnResetSettings.configure(command=self.btnResetSettings_click)
        self.btnResetSettings.configure(disabledforeground="#a3a3a3")
        self.btnResetSettings.configure(foreground="#000000")
        self.btnResetSettings.configure(highlightbackground="#d9d9d9")
        self.btnResetSettings.configure(highlightcolor="black")
        self.btnResetSettings.configure(pady="0")
        self.btnResetSettings.configure(text='''Reset Settings''')

        self.btnUploadSettings = tk.Button(self.tabCommands)
        self.btnUploadSettings.place(x=120, y=100, height=24, width=105)
        self.btnUploadSettings.configure(activebackground="#ececec")
        self.btnUploadSettings.configure(activeforeground="#000000")
        self.btnUploadSettings.configure(background="#d9d9d9")
        self.btnUploadSettings.configure(command=self.btnUploadSettings_click)
        self.btnUploadSettings.configure(disabledforeground="#a3a3a3")
        self.btnUploadSettings.configure(foreground="#000000")
        self.btnUploadSettings.configure(highlightbackground="#d9d9d9")
        self.btnUploadSettings.configure(highlightcolor="black")
        self.btnUploadSettings.configure(pady="0")
        self.btnUploadSettings.configure(state='disabled')
        self.btnUploadSettings.configure(text='''Upload Settings''')

        if PY2:
            self.txtSelectedHex = tk.Entry(self.tabFirmware)
            self.txtSelectedHex.place(x=10, y=10, height=24, width=474)
            self.txtSelectedHex.configure(background="white")
            self.txtSelectedHex.configure(borderwidth="2")
            self.txtSelectedHex.configure(disabledforeground="#a3a3a3")
            self.txtSelectedHex.configure(font="TkFixedFont")
            self.txtSelectedHex.configure(state='readonly')
            self.txtSelectedHex.configure(foreground="#000000")
            self.txtSelectedHex.configure(highlightbackground="#d9d9d9")
            self.txtSelectedHex.configure(highlightcolor="black")
            self.txtSelectedHex.configure(insertbackground="black")
            self.txtSelectedHex.configure(selectbackground="blue")
            self.txtSelectedHex.configure(selectforeground="white")
            self.txtSelectedHex.configure(textvariable=self.txtSelectedHex_value)
            self.txtSelectedHex.configure(validate="all")
            #txtSelectedHex_change = self.txtSelectedHex.register(AVR_IBus_Settings_page_support.txtSelectedHex_change)
            self.txtSelectedHex.configure(validatecommand=(self.txtSelectedHex_change))

            self.btnSelectHex = tk.Button(self.tabFirmware)
            self.btnSelectHex.place(x=485, y=10, height=24, width=50)
            self.btnSelectHex.configure(activebackground="#ececec")
            self.btnSelectHex.configure(activeforeground="#000000")
            self.btnSelectHex.configure(background="#d9d9d9")
            self.btnSelectHex.configure(command=self.btnSelectHex_click)
            self.btnSelectHex.configure(disabledforeground="#a3a3a3")
            self.btnSelectHex.configure(foreground="#000000")
            self.btnSelectHex.configure(highlightbackground="#d9d9d9")
            self.btnSelectHex.configure(highlightcolor="black")
            self.btnSelectHex.configure(pady="0")
            self.btnSelectHex.configure(text='''. . .''')

            self.btnUpload = tk.Button(self.tabFirmware)
            self.btnUpload.place(x=215, y=65, height=24, width=120)
            self.btnUpload.configure(activebackground="#ececec")
            self.btnUpload.configure(activeforeground="#000000")
            self.btnUpload.configure(background="#d9d9d9")
            self.btnUpload.configure(command=self.btnUpload_click)
            self.btnUpload.configure(disabledforeground="#a3a3a3")
            self.btnUpload.configure(foreground="#000000")
            self.btnUpload.configure(highlightbackground="#d9d9d9")
            self.btnUpload.configure(highlightcolor="black")
            self.btnUpload.configure(pady="0")
            self.btnUpload.configure(text='''Upload''')

            self.progressBar = ttk.Progressbar(self.tabFirmware)
            self.progressBar.place(x=10, y=39, width=524, height=14)
            self.progressBar.configure(length="524")
            self.progressBar.configure(value="90")
            self.progressBar.configure(mode="determinate")



        self.TScale1 = ttk.Scale(self.tabLogging, from_=0, to=1.0)
        self.TScale1.place(x=335, y=25, height=24, width=146)
        self.TScale1.configure(value="0.5")

        self.Scale3 = tk.Scale(self.tabLogging, from_=0.0, to=100.0)
        self.Scale3.place(x=185, y=60, height=256, width=218)
        self.Scale3.configure(activebackground="#ececec")
        self.Scale3.configure(background="#d9d9d9")
        self.Scale3.configure(borderwidth="2")
        self.Scale3.configure(command=self.scale3_change)
        self.Scale3.configure(foreground="#000000")
        self.Scale3.configure(highlightbackground="#d9d9d9")
        self.Scale3.configure(highlightcolor="black")
        self.Scale3.configure(orient="horizontal")
        self.Scale3.configure(showvalue="0")
        self.Scale3.configure(troughcolor="#d9d9d9")
        self.Tabs.bind('<Button-1>',_button_press)
        self.Tabs.bind('<ButtonRelease-1>',_button_release)
        self.Tabs.bind('<Motion>',_mouse_over)

        self.logo = tk.Label(self)
        self.logo.place(x=780, y=0, height=47, width=50)
        self.logo.configure(activebackground="#f9f9f9")
        self.logo.configure(activeforeground="black")
        self.logo.configure(background="#d9d9d9")
        self.logo.configure(disabledforeground="#a3a3a3")
        self.logo.configure(foreground="#000000")
        self.logo.configure(highlightbackground="#d9d9d9")
        self.logo.configure(highlightcolor="black")
        #self.logo.configure(relief="groove")
        self.logo.configure(text='''logo''')
        self.logo.configure(image=self.LOGO_IMG)

        '''
        self.statusBar = tk.Label(self)
        self.statusBar.place(x=0, y=465, height=20, width=835)
        self.statusBar.configure(activebackground="#f9f9f9")
        self.statusBar.configure(activeforeground="black")
        self.statusBar.configure(anchor='w')
        self.statusBar.configure(background="#d9d9d9")
        self.statusBar.configure(borderwidth="1")
        self.statusBar.configure(disabledforeground="#a3a3a3")
        self.statusBar.configure(font="-family {Segoe UI} -size 8")
        self.statusBar.configure(foreground="#000000")
        self.statusBar.configure(highlightbackground="#d9d9d9")
        self.statusBar.configure(highlightcolor="black")
        self.statusBar.configure(relief="sunken")
        self.statusBar.configure(text='Status')
        '''

        self.statusBars = [tk.Label(self), tk.Label(self), tk.Label(self)]
        for statusBar in self.statusBars:
            #statusBar = tk.Label(self)
            statusBar.configure(activebackground="#f9f9f9")
            statusBar.configure(activeforeground="black")
            statusBar.configure(anchor='w')
            statusBar.configure(background="#d9d9d9")
            statusBar.configure(borderwidth="1")
            statusBar.configure(disabledforeground="#a3a3a3")
            statusBar.configure(font="-family {Segoe UI} -size 8")
            statusBar.configure(foreground="#000000")
            statusBar.configure(highlightbackground="#d9d9d9")
            statusBar.configure(highlightcolor="black")
            statusBar.configure(relief="sunken")

        self.statusBars[0].place(x=0, y=465, height=20, width=200)
        self.statusBars[0].configure(text='''Status 0''')
        self.statusBars[1].place(x=200, y=465, height=20, width=200)
        self.statusBars[1].configure(text='''Status 1''')
        self.statusBars[2].place(x=400, y=465, height=20, width=435)
        self.statusBars[2].configure(text='''Status 2''')

        self.txtSend = tk.Text(self)
        self.txtSend.place(x=10, y=415, height=44, width=499)
        self.txtSend.configure(background="white")
        self.txtSend.configure(borderwidth="2")
        self.txtSend.configure(font="-family {Calibri} -size 11")
        self.txtSend.configure(foreground="black")
        self.txtSend.configure(highlightbackground="#d9d9d9")
        self.txtSend.configure(highlightcolor="black")
        self.txtSend.configure(insertbackground="black")
        self.txtSend.configure(selectbackground="blue")
        self.txtSend.configure(selectforeground="white")
        self.txtSend.configure(wrap="word")

        self.btnSend = tk.Button(self)
        self.btnSend.place(x=515, y=415, height=44, width=45)
        self.btnSend.configure(activebackground="#ececec")
        self.btnSend.configure(activeforeground="#000000")
        self.btnSend.configure(background="#d9d9d9")
        self.btnSend.configure(command=self.btnSend_click)
        self.btnSend.configure(disabledforeground="#a3a3a3")
        self.btnSend.configure(foreground="#000000")
        self.btnSend.configure(highlightbackground="#d9d9d9")
        self.btnSend.configure(highlightcolor="black")
        self.btnSend.configure(pady="0")
        self.btnSend.configure(text='''Send''')

        self.rdAVR = tk.Radiobutton(self)
        self.rdAVR.place(x=10, y=10, height=25, width=35)
        self.rdAVR.configure(activebackground="#ececec")
        self.rdAVR.configure(activeforeground="#000000")
        self.rdAVR.configure(background="#d9d9d9")
        self.rdAVR.configure(command=self.rdAVR_click)
        self.rdAVR.configure(disabledforeground="#a3a3a3")
        self.rdAVR.configure(foreground="#000000")
        self.rdAVR.configure(highlightbackground="#d9d9d9")
        self.rdAVR.configure(highlightcolor="black")
        self.rdAVR.configure(indicatoron="0")
        self.rdAVR.configure(justify='left')
        self.rdAVR.configure(selectcolor="#8080ff")
        self.rdAVR.configure(text='''AVR''')
        self.rdAVR.configure(value="0")
        self.rdAVR.configure(variable=self.avr_mode)

        self.rdIBus = tk.Radiobutton(self)
        self.rdIBus.place(x=45, y=10, height=25, width=35)
        self.rdIBus.configure(activebackground="#ececec")
        self.rdIBus.configure(activeforeground="#000000")
        self.rdIBus.configure(background="#d9d9d9")
        self.rdIBus.configure(command=self.rdIBus_click)
        self.rdIBus.configure(disabledforeground="#a3a3a3")
        self.rdIBus.configure(foreground="#000000")
        self.rdIBus.configure(highlightbackground="#d9d9d9")
        self.rdIBus.configure(highlightcolor="black")
        self.rdIBus.configure(indicatoron="0")
        self.rdIBus.configure(justify='left')
        self.rdIBus.configure(selectcolor="#8080ff")
        self.rdIBus.configure(text='''IBus''')
        self.rdIBus.configure(value="-1")
        self.rdIBus.configure(variable=self.avr_mode)

        self.tgLog = tk.Checkbutton(self)
        self.tgLog.place(x=570, y=40, height=15, width=61)
        self.tgLog.configure(activebackground="#d9d9d9")
        self.tgLog.configure(activeforeground="#000000")
        self.tgLog.configure(background="#d9d9d9")
        self.tgLog.configure(command=self.tgLog_click)
        self.tgLog.configure(disabledforeground="#a3a3a3")
        self.tgLog.configure(foreground="#000000")
        self.tgLog.configure(highlightbackground="#d9d9d9")
        self.tgLog.configure(highlightcolor="black")
        self.tgLog.configure(justify='left')
        self.tgLog.configure(text='''Logging''')
        self.tgLog.configure(variable=self.tgLog_value)

        self.tgLogTime = tk.Checkbutton(self)
        self.tgLogTime.place(x=635, y=40, height=15, width=46)
        self.tgLogTime.configure(activebackground="#d9d9d9")
        self.tgLogTime.configure(activeforeground="#000000")
        self.tgLogTime.configure(background="#d9d9d9")
        self.tgLogTime.configure(command=self.tgLogTime_click)
        self.tgLogTime.configure(disabledforeground="#a3a3a3")
        self.tgLogTime.configure(foreground="#000000")
        self.tgLogTime.configure(highlightbackground="#d9d9d9")
        self.tgLogTime.configure(highlightcolor="black")
        self.tgLogTime.configure(justify='left')
        self.tgLogTime.configure(text='''Time''')
        self.tgLogTime.configure(variable=self.tgLogTime_value)

        self.tgAutScroll = tk.Checkbutton(self)
        self.tgAutScroll.place(x=685, y=40, height=15, width=61)
        self.tgAutScroll.configure(activebackground="#d9d9d9")
        self.tgAutScroll.configure(activeforeground="#000000")
        self.tgAutScroll.configure(background="#d9d9d9")
        self.tgAutScroll.configure(command=self.tgAutScroll_click)
        self.tgAutScroll.configure(disabledforeground="#a3a3a3")
        self.tgAutScroll.configure(foreground="#000000")
        self.tgAutScroll.configure(highlightbackground="#d9d9d9")
        self.tgAutScroll.configure(highlightcolor="black")
        self.tgAutScroll.configure(justify='left')
        self.tgAutScroll.configure(text='''A.Scroll''')
        self.tgAutScroll.configure(variable=self.tgAutScroll_value)

        self.tgUpload = tk.Checkbutton(self)
        self.tgUpload.place(x=495, y=40, height=15, width=61)
        self.tgUpload.configure(activebackground="#d9d9d9")
        self.tgUpload.configure(activeforeground="#000000")
        self.tgUpload.configure(background="#d9d9d9")
        self.tgUpload.configure(command=self.tgUpload_click)
        self.tgUpload.configure(disabledforeground="#a3a3a3")
        self.tgUpload.configure(foreground="#000000")
        self.tgUpload.configure(highlightbackground="#d9d9d9")
        self.tgUpload.configure(highlightcolor="black")
        self.tgUpload.configure(justify='left')
        self.tgUpload.configure(overrelief="flat")
        self.tgUpload.configure(text='''Upload''')
        self.tgUpload.configure(variable=self.tgUpload_value)

        self.lbLog = tk.Listbox(self)
        self.sbLog = tk.Scrollbar(self, orient=tk.VERTICAL)

        self.lbLog.place(x=570, y=60, height=400, width=240) #256
        self.lbLog.configure(background="#464646")
        self.lbLog.configure(cursor="xterm")
        self.lbLog.configure(disabledforeground="#a3a3a3")
        self.lbLog.configure(font="-family {Courier New} -size 8")
        self.lbLog.configure(foreground="#00ff00")
        self.lbLog.configure(highlightbackground="#d9d9d9")
        self.lbLog.configure(highlightcolor="#d9d9d9")
        self.lbLog.configure(selectbackground="blue")
        self.lbLog.configure(selectforeground="white")
        #self.lbLog.configure(listvariable=self.lbLog_list)
        self.lbLog.configure(yscrollcommand=self.sbLog.set)

        self.sbLog.place(x=810, y=60, height=400, width=15)
        #self.sbLog.configure(orient=tk.VERTICAL)
        self.sbLog.configure(command=self.sbLog_change)

        self.btnLogClear = tk.Button(self)
        self.btnLogClear.place(x=750, y=40, height=15, width=15)
        self.btnLogClear.configure(activebackground="#ececec")
        self.btnLogClear.configure(activeforeground="#000000")
        self.btnLogClear.configure(background="#d9d9d9")
        self.btnLogClear.configure(command=self.btnLogClear_click)
        self.btnLogClear.configure(disabledforeground="#a3a3a3")
        self.btnLogClear.configure(foreground="#000000")
        self.btnLogClear.configure(highlightbackground="#d9d9d9")
        self.btnLogClear.configure(highlightcolor="black")
        self.btnLogClear.configure(pady="0")



    def _update(self):
        print('update tick')

        self.update_ports()

        #print(self.serialports.get())
        self.after(1000, self._update)


    def _def_font_get(self):
        #fonts = font.families()
        # print (fonts)
        #if "TkDefaultFont" in fonts:
        #    print("found")
        #else:
        #    print("Not Found")
        #print(font.Font(font="TkDefaultFont").configure())
        return font.Font(font="TkDefaultFont").configure()

    def _def_font_size_get(self):
        self._font_size = self._def_font_get()['size']
        return self._font_size

    def _def_font_size_set(self):
        # font = "-family {DejaVu Sans} -size 10 -weight normal"
        font.nametofont("TkDefaultFont").configure(size=self._font_size + self._font_count)

    def _def_font_reset(self):
        font.nametofont("TkDefaultFont").configure(size=font_size)

    def get_ports(self):
        ports = []
        '''if platform.system() == 'Linux':
            for f in glob('/dev/ttyUSB*'):
                ports.append(f)
        elif platform.system() == 'Darwin':
            for f in glob('/dev/tty.usbserial*'):
                ports.append(f)
        else:'''
        for port in list_ports.comports():
            try:
                Serial(port.device)
                ports.append(port.device)
            except serialutil.SerialException:
                pass
        ports.sort()
        #result = ['Select Device...']
        ports.insert(0, 'Select Device...')
        #result.extend(ports)
        return ports

    def update_ports(self):
        if self.serial:
            return
        port_list_temp = self.port_list
        self.port_list = self.get_ports()
        if port_list_temp == self.port_list:
            return
        self.cbSerialPorts.configure(values=self.port_list)
        if len(self.port_list) < 2:
            self.cbSerialPorts.current(0)
        else:
            if self.cbSerialPorts.current() < 1:
                self.cbSerialPorts.current(1)

    def btnLogClear_click(self):
        print('AVR_IBus_Settings_page_support.btnLogClear_click')
        def _btnLogClear_click(self):
            self.lbLog_clear()
        as_thread(_btnLogClear_click, (self,))

    def lbLog_add(self, text):

        for line in text.split('\r'):
            line = line.replace('\n', '')
            if line == '':
                continue

            timestamp = ''
            if self.tgLogTime_value.get():
                timestamp = datetime.datetime.now().strftime('%H:%M:%S.%f')[:-3]
                timestamp = timestamp + ': '
            self.lbLog.insert(END, '%s%s' % (timestamp, line))
            #self.lbLog_list.set(self.lbLog_list.get().append('%s%s' % (timestamp, line)))

        if self.tgAutScroll_value.get():
            self.lbLog_scroll_down()

    def lbLog_clear(self):
        self.lbLog.delete(0,'end')

    def lbLog_scroll_down(self):
        def _lbLog_scroll_down():
            try:
                self.lbLog.yview('moveto', '1.0')
                # self.sbLog.set(END)
                # self.lbLog.see(END)
            except:
                print('scroll error')
                pass
            self.dont_scroll = False

        if not self.dont_scroll:
            self.dont_scroll = True
            try:
                self.lbLog.after_cancel(self.after_cancel_id)
            except:
                print('no ID')
            self.after_cancel_id = self.lbLog.after(200, _lbLog_scroll_down)


    def sbLog_change(self, *args):
        print(args)
        self.tgAutScroll_value.set(False)
        try:
            self.lbLog.yview(*args)
        except:
            pass
        
    def serial_open(self):
        #print(self.avr_mode.get())
        if self.avr_mode.get() == 0:
            baudrate = 38400
            parity = serial.PARITY_NONE
        else:
            baudrate = 9600
            parity = serial.PARITY_EVEN

        self.serial_device = self.cbSerialPorts.get()

        try:
            self.serial = serial.Serial(
                self.serial_device,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=parity,
                stopbits=serial.STOPBITS_ONE,
                timeout=1,
                xonxoff=0,
                dsrdtr=0,
                rtscts=0)
        except serial.SerialException:
            return

        self.serial_run = True

        self.serial_reading_thread = Thread(target=self.serial_reading)
        self.serial_reading_thread.daemon = True
        self.serial_reading_thread.start()

        self.btnOpen.configure(state='disabled')
        self.btnClose.configure(state='normal')
        self.rdAVR.configure(state='disabled')
        self.rdIBus.configure(state='disabled')

    def serial_close(self):
        if self.serial is None:
            return
        self.serial_run = False
        try:
            self.serial_reading_thread.join()
        except RuntimeError:
            pass
        #self.serial = Serial()
        self.serial.close()
        self.serial = None

        self.btnOpen.configure(state='normal')
        self.btnClose.configure(state='disabled')
        self.rdAVR.configure(state='normal')
        self.rdIBus.configure(state='normal')

    def serial_reading(self):
        while self.serial_run:
            try:
                #self.serial = Serial()
                '''
                result = self.serial.read_until('\r')
                if len(result) > 0:
                    self.lbLog_add(result)
                '''
                char = self.serial.read(1)
                self.serial_rx_buffer.append(char)
                if char == '\r':
                    self.lbLog_add(''.join(self.serial_rx_buffer))
                    self.serial_rx_buffer = self.serial_rx_buffer[len(self.serial_rx_buffer):]
            except serial.SerialException:
                self.serial_close()

    def serial_write(self, text):
        try:
            #self.serial = Serial()
            self.serial.write(b'%s\r' % text.encode('ascii'))
        except serial.SerialException:
            self.serial_close()
        except AttributeError:
            self.statusBars[0]['text'] = 'No Connection'


    def btnAV0_click(self):
        print('AVR_IBus_Settings_page_support.btnAV0_click')
        

    def btnAV1_click(self):
        print('AVR_IBus_Settings_page_support.btnAV1_click')
        

    def btnAV_click(self):
        print('AVR_IBus_Settings_page_support.btnAV_click')
        

    def btnBFD_click(self):
        print('AVR_IBus_Settings_page_support.btnBFD_click')
        

    def btnBlink_click(self):
        print('AVR_IBus_Settings_page_support.btnBlink_click')
        

    def btnCVMClose_click(self):
        print('AVR_IBus_Settings_page_support.btnCVMClose_click')
        

    def btnCVMFold_click(self):
        print('AVR_IBus_Settings_page_support.btnCVMFold_click')
        

    def btnCVMOpen_click(self):
        print('AVR_IBus_Settings_page_support.btnCVMOpen_click')
        

    def btnCVMStop_click(self):
        print('AVR_IBus_Settings_page_support.btnCVMStop_click')
        

    def btnCdcEmu_click(self):
        print('AVR_IBus_Settings_page_support.btnCdcEmu_click')
        def _btnCdcEmu_click(self):
            self.txtSend_set('SET:CDC_EMU:%s' % (1 if self.tgCdcEmu_value.get() else 0))
        as_thread(_btnCdcEmu_click, (self,))


    

    def btnDiag0_click(self):
        print('AVR_IBus_Settings_page_support.btnDiag0_click')
        

    def btnDiag1_click(self):
        print('AVR_IBus_Settings_page_support.btnDiag1_click')
        

    def btnDiag2_click(self):
        print('AVR_IBus_Settings_page_support.btnDiag2_click')
        

    def btnDiag_click(self):
        print('AVR_IBus_Settings_page_support.btnDiag_click')
        



    def btnDrl_click(self):
        print('AVR_IBus_Settings_page_support.btnDrl_click')
        

    def btnF2P_click(self):
        print('AVR_IBus_Settings_page_support.btnF2P_click')
        

    def btnFogTurn_click(self):
        print('AVR_IBus_Settings_page_support.btnFogTurn_click')
        

    def btnHeatFFB_click(self):
        print('AVR_IBus_Settings_page_support.btnHeatFFB_click')
        

    def btnLevLight_click(self):
        print('AVR_IBus_Settings_page_support.btnLevLight_click')
        

    def btnLightBeam_click(self):
        print('AVR_IBus_Settings_page_support.btnLightBeam_click')
        

    def btnLightOther_click(self):
        print('AVR_IBus_Settings_page_support.btnLightOther_click')
        

    def btnLightPark_click(self):
        print('AVR_IBus_Settings_page_support.btnLightPark_click')
        

    def btnLightTurn_click(self):
        print('AVR_IBus_Settings_page_support.btnLightTurn_click')
        

    def btnLight_click(self):
        print('AVR_IBus_Settings_page_support.btnLight_click')
        

    def btnLockSpeed_click(self):
        print('AVR_IBus_Settings_page_support.btnLockSpeed_click')
        

    def btnMirFold_click(self):
        print('AVR_IBus_Settings_page_support.btnMirFold_click')
        

    def btnNavZoom_click(self):
        print('AVR_IBus_Settings_page_support.btnNavZoom_click')
        

    def btnNtwkMode_click(self):
        print('AVR_IBus_Settings_page_support.btnNtwkMode_click')
        

    def btnObcDisp_click(self):
        print('AVR_IBus_Settings_page_support.btnObcDisp_click')
        

    def btnOpen_click(self):
        print('AVR_IBus_Settings_page_support.btnOpen_click')
        def _btnOpen_click(self):
            self.serial_open()
        as_thread(_btnOpen_click, (self,))
        
    def btnClose_click(self):
        print('AVR_IBus_Settings_page_support.btnClose_click')
        def _btnClose_click(self):
            self.serial_close()        
        as_thread(_btnClose_click, (self,))

    def btnCustom_click(self):
        print('AVR_IBus_Settings_page_support.btnCustom_click')
        

    def btnPing_click(self):
        print('AVR_IBus_Settings_page_support.btnPing_click')


    def btnReset_click(self):
        print('AVR_IBus_Settings_page_support.btnReset_click')
        def _btnReset_click(self):
            self.serial_write('reset')
        as_thread(_btnReset_click, (self,))

    def btnRCam_click(self):
        print('AVR_IBus_Settings_page_support.btnRCam_click')
        

    def btnRelock_click(self):
        print('AVR_IBus_Settings_page_support.btnRelock_click')
        
    def btnDownloadSettings_click(self):
        print('AVR_IBus_Settings_page_support.btnDownloadSettings_click')
        def _btnDownloadSettings_click(self):
            self.serial_write('get:sts')
        as_thread(_btnDownloadSettings_click, (self,))

    def btnUploadSettings_click(self):
        print('AVR_IBus_Settings_page_support.btnUploadSettings_click')

    def btnResetSettings_click(self):
        print('AVR_IBus_Settings_page_support.btnResetSettings_click')
        def _btnResetSettings_click(self):
            self.serial_write('set:rst')
        as_thread(_btnResetSettings_click, (self,))
        

    def btnRxTx_click(self):
        print('AVR_IBus_Settings_page_support.btnRxTx_click')
        

    def btnSelectHex_click(self):
        print('AVR_IBus_Settings_page_support.btnSelectHex_click')
        #name = filedialog.askopenfile('Choose HexFile', AVR_IBUS_TITLE, default='AVR_IBus_NANO*.hex',
        #                                   filetypes=['AVR_IBus_NANO*.hex'])
        name = filedialog.askopenfilename(title="Select file", filetypes = (("hex files", 'AVR_IBus_NANO*.hex'), ("all files", "*.*"))) #initialdir = "/",
        print(name)

        if name != '':
            self.txtSelectedHex_value.set(os.path.split(name)[1])

        

    def btnSenVal_click(self):
        print('AVR_IBus_Settings_page_support.btnSenVal_click')
        

    def btnSend_click(self):
        print('AVR_IBus_Settings_page_support.btnSend_click')
        
        print(self.txtSend.get("1.0","end").strip())
        self.serial_write(self.txtSend.get("1.0","end").strip())

    def txtSend_set(self, text):
        self.txtSend.delete(1.0,"end")
        self.txtSend.insert(1.0, text)


    def txtSend_get(self):
        return self.txtSend.get("1.0","end").strip()

    def btnShutdown_click(self):
        print('AVR_IBus_Settings_page_support.btnShutdown_click')
        

    def btnTimeOff_click(self):
        print('AVR_IBus_Settings_page_support.btnTimeOff_click')
        

    def btnUnlock_click(self):
        print('AVR_IBus_Settings_page_support.btnUnlock_click')
        

    def btnUpdateOff_click(self):
        print('AVR_IBus_Settings_page_support.btnUpdateOff_click')
        

    def btnUpdateOn_click(self):
        print('AVR_IBus_Settings_page_support.btnUpdateOn_click')
        


        

    def btnUpload_click(self):
        print('AVR_IBus_Settings_page_support.btnUpload_click')
        self.btnUpload.configure(state='disabled')
        print(self.progressBar)
        #self.progressBar.configure(mode="indeterminate")
        self.btnUpload.update_idletasks() #.update()
        for _ in range(0,101,5):
            #self.progressBar["value"]=_
            #self.progressBar.update()
            self.progressBar_set(_, 100, 1)
            print(_)
            time.sleep(0.05)
        for _ in range(100,0,-5):
            #self.progressBar["value"]=_
            #self.progressBar.update()
            self.progressBar_set(_, 100, 0)
            print(_)
            time.sleep(0.05)
        self.btnUpload.configure(state='normal')

        self.btnUpload.update()
        self.progressBar_reset()
        

    def btnWelLight_click(self):
        print('AVR_IBus_Settings_page_support.btnWelLight_click')
        

    def btnWelMsgTxt_click(self):
        print('AVR_IBus_Settings_page_support.btnWelMsgTxt_click')
        

    def btnWelMsg_click(self):
        print('AVR_IBus_Settings_page_support.btnWelMsg_click')
        

    def rdAVR_click(self):
        print('AVR_IBus_Settings_page_support.rdAVR_click')
        

    def rdIBus_click(self):
        print('AVR_IBus_Settings_page_support.rdIBus_click')
        

    def scale3_change(self, *args):
        print('AVR_IBus_Settings_page_support.scale3_change')
        

    def spnBFDTime_click(self):
        print('AVR_IBus_Settings_page_support.spnBFDTime_click')
        

    def spnBlink_click(self):
        print('AVR_IBus_Settings_page_support.spnBlink_click')
        

    def spnFogTurnSpeed_click(self):
        print('AVR_IBus_Settings_page_support.spnFogTurnSpeed_click')
        

    def spnFogTurnTime_click(self):
        print('AVR_IBus_Settings_page_support.spnFogTurnTime_click')
        

    def spnLevLightTime_click(self):
        print('AVR_IBus_Settings_page_support.spnLevLightTime_click')
        

    def spnNtwkMode_click(self):
        print('AVR_IBus_Settings_page_support.spnNtwkMode_click')
        

    def spnRCamTime_click(self):
        print('AVR_IBus_Settings_page_support.spnRCamTime_click')
        

    def spnRxTxTime_click(self):
        print('AVR_IBus_Settings_page_support.spnRxTxTime_click')
        

    def spnSenVal_click(self):
        print('AVR_IBus_Settings_page_support.spnSenVal_click')
        

    def spnTimeOff_click(self):
        print('AVR_IBus_Settings_page_support.spnTimeOff_click')
        

    def spnWelLightTime_click(self):
        print('AVR_IBus_Settings_page_support.spnWelLightTime_click')
        

    def tgAutScroll_click(self):
        print('AVR_IBus_Settings_page_support.tgAutScroll_click')
        

    def tgBFD_click(self):
        print('AVR_IBus_Settings_page_support.tgBFD_click')
        

    def tgBlink_click(self):
        print('AVR_IBus_Settings_page_support.tgBlink_click')
        

    def tgCVMFold_click(self):
        print('AVR_IBus_Settings_page_support.tgCVMFold_click')
        

    def tgCdcEmu_click(self):
        print('AVR_IBus_Settings_page_support.tgCdcEmu_click')
        

    def tgDrlFogFront_click(self):
        print('AVR_IBus_Settings_page_support.tgDrlFogFront_click')
        

    def tgDrlParkFront_click(self):
        print('AVR_IBus_Settings_page_support.tgDrlParkFront_click')
        

    def tgDrlParkTail_click(self):
        print('AVR_IBus_Settings_page_support.tgDrlParkTail_click')
        

    def tgDrl_click(self):
        print('AVR_IBus_Settings_page_support.tgDrl_click')
        

    def tgF2PHigh_click(self):
        print('AVR_IBus_Settings_page_support.tgF2PHigh_click')
        

    def tgF2PLow_click(self):
        print('AVR_IBus_Settings_page_support.tgF2PLow_click')
        

    def tgF2P_click(self):
        print('AVR_IBus_Settings_page_support.tgF2P_click')
        

    def tgFogTurn_click(self):
        print('AVR_IBus_Settings_page_support.tgFogTurn_click')
        

    def tgHeatFFB_click(self):
        print('AVR_IBus_Settings_page_support.tgHeatFFB_click')
        

    def tgLevLight_click(self):
        print('AVR_IBus_Settings_page_support.tgLevLight_click')
        

    def tgLightBeamHigh_click(self):
        print('AVR_IBus_Settings_page_support.tgLightBeamHigh_click')
        

    def tgLightBeamLow_click(self):
        print('AVR_IBus_Settings_page_support.tgLightBeamLow_click')
        

    def tgLightOtherAmbient_click(self):
        print('AVR_IBus_Settings_page_support.tgLightOtherAmbient_click')
        

    def tgLightOtherBrake_click(self):
        print('AVR_IBus_Settings_page_support.tgLightOtherBrake_click')
        

    def tgLightOtherFogBack_click(self):
        print('AVR_IBus_Settings_page_support.tgLightOtherFogBack_click')
        

    def tgLightOtherFogFront_click(self):
        print('AVR_IBus_Settings_page_support.tgLightOtherFogFront_click')
        

    def tgLightOtherLicence_click(self):
        print('AVR_IBus_Settings_page_support.tgLightOtherLicence_click')
        

    def tgLightOtherReverse_click(self):
        print('AVR_IBus_Settings_page_support.tgLightOtherReverse_click')
        

    def tgLightParkBackInside_click(self):
        print('AVR_IBus_Settings_page_support.tgLightParkBackInside_click')
        

    def tgLightParkBack_click(self):
        print('AVR_IBus_Settings_page_support.tgLightParkBack_click')
        

    def tgLightParkFront_click(self):
        print('AVR_IBus_Settings_page_support.tgLightParkFront_click')
        

    def tgLightTurnBack_click(self):
        print('AVR_IBus_Settings_page_support.tgLightTurnBack_click')
        

    def tgLightTurnFront_click(self):
        print('AVR_IBus_Settings_page_support.tgLightTurnFront_click')
        

    def tgLightTurnSide_click(self):
        print('AVR_IBus_Settings_page_support.tgLightTurnSide_click')
        

    def tgLockSpeed_click(self):
        print('AVR_IBus_Settings_page_support.tgLockSpeed_click')
        

    def tgLogTime_click(self):
        print('AVR_IBus_Settings_page_support.tgLogTime_click')
        

    def tgLog_click(self):
        print('AVR_IBus_Settings_page_support.tgLog_click')
        

    def tgNavZoom_click(self):
        print('AVR_IBus_Settings_page_support.tgNavZoom_click')
        

    def tgObcDispCoolant_click(self):
        print('AVR_IBus_Settings_page_support.tgObcDispCoolant_click')
        

    def tgObcDispEight_click(self):
        print('AVR_IBus_Settings_page_support.tgObcDispEight_click')
        

    def tgObcDispFive_click(self):
        print('AVR_IBus_Settings_page_support.tgObcDispFive_click')
        

    def tgObcDispOil_click(self):
        print('AVR_IBus_Settings_page_support.tgObcDispOil_click')
        

    def tgObcDispSeven_click(self):
        print('AVR_IBus_Settings_page_support.tgObcDispSeven_click')
        

    def tgObcDispSix_click(self):
        print('AVR_IBus_Settings_page_support.tgObcDispSix_click')
        

    def tgObcDispSpeed_click(self):
        print('AVR_IBus_Settings_page_support.tgObcDispSpeed_click')
        

    def tgObcDispVolt_click(self):
        print('AVR_IBus_Settings_page_support.tgObcDispVolt_click')
        

    def tgObcDisp_click(self):
        print('AVR_IBus_Settings_page_support.tgObcDisp_click')
        

    def tgRCam_click(self):
        print('AVR_IBus_Settings_page_support.tgRCam_click')
        

    def tgRelock_click(self):
        print('AVR_IBus_Settings_page_support.tgRelock_click')
        

    def tgRxTxRx_click(self):
        print('AVR_IBus_Settings_page_support.tgRxTxRx_click')
        

    def tgRxTxTx_click(self):
        print('AVR_IBus_Settings_page_support.tgRxTxTx_click')
        

    def tgSenVal_click(self):
        print('AVR_IBus_Settings_page_support.tgSenVal_click')
        

    def tgUnlockBrake_click(self):
        print('AVR_IBus_Settings_page_support.tgUnlockBrake_click')
        

    def tgUnlockDoor_click(self):
        print('AVR_IBus_Settings_page_support.tgUnlockDoor_click')
        

    def tgUnlockGearP_click(self):
        print('AVR_IBus_Settings_page_support.tgUnlockGearP_click')
        

    def tgUnlockIgn1_click(self):
        print('AVR_IBus_Settings_page_support.tgUnlockIgn1_click')
        

    def tgUpload_click(self):
        print('AVR_IBus_Settings_page_support.tgUpload_click')
        

    def tgWelLightCancelDoor_click(self):
        print('AVR_IBus_Settings_page_support.tgWelLightCancelDoor_click')
        

    def tgWelLightCancelIgn1_click(self):
        print('AVR_IBus_Settings_page_support.tgWelLightCancelIgn1_click')
        

    def tgWelLightCancelIgn3_click(self):
        print('AVR_IBus_Settings_page_support.tgWelLightCancelIgn3_click')
        

    def tgWelLightCancelKeyIn_click(self):
        print('AVR_IBus_Settings_page_support.tgWelLightCancelKeyIn_click')
        

    def tgWelLight_click(self):
        print('AVR_IBus_Settings_page_support.tgWelLight_click')
        

    def tgWelMsg_click(self):
        print('AVR_IBus_Settings_page_support.tgWelMsg_click')
        

    def spnBFDTime_change(self, *args):
        print('AVR_IBus_Settings_page_support.spnBFDTime_change')
        for arg in args:
            print ('another arg:', arg)
        
        return True

    def txtWelMsg_change(self, *args):
        print('AVR_IBus_Settings_page_support.txtWelMsg_change')
        for arg in args:
            print ('another arg:', arg)
        
        return True

    def txtSelectedHex_change(self, *args):
        print('AVR_IBus_Settings_page_support.txtSelectedHex_change')
        for arg in args:
            print ('another arg:', arg)
        
        return True

    def progressBar_set(self, value, max_value=100, mode=0):
        if mode == 0:
            self.progressBar.configure(mode="determinate")
        else:
            self.progressBar.configure(mode="indeterminate")

        self.progressBar["value"] = value
        self.progressBar['maximum'] = max_value
        self.progressBar.update()

    def progressBar_reset(self):
        self.progressBar_set(0)


# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index


def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None


def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


def decode_img(msg, size=(None,None)):
    #msg = msg[msg.find(b"<plain_txt_msg:img>")+len(b"<plain_txt_msg:img>"):
    #          msg.find(b"<!plain_txt_msg>")]
    msg = base64.b64decode(msg)
    buf = io.BytesIO(msg)
    img = Image.open(buf)
    if not None in size:
        img = img.resize(size, Image.ANTIALIAS)
    return img


def as_thread(cmd, args):
    t = Thread(target=cmd, args=args)
    t.daemon = True
    t.start()


if __name__ == "__main__":
    app = App()
    app.mainloop()

